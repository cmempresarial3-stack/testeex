{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack Christian mobile application designed to provide spiritual guidance and community connection. The project combines a React-based web frontend with an Express.js backend, featuring daily devotionals, Bible study tools, hymnal access, note-taking capabilities, and an integrated store for Christian products. The core message is \"Você não está sozinho, viva com propósito\" (You are not alone, live with purpose).\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client is built with **React 18** and **TypeScript**, utilizing a mobile-first responsive design approach:\n- **Vite** for fast development and optimized builds\n- **Wouter** for lightweight client-side routing\n- **Tailwind CSS** with **shadcn/ui** components for consistent styling\n- **TanStack Query** for server state management and caching\n- **Context API** for global application state (user profile, settings, notes)\n- **Local Storage** integration for offline-first data persistence\n\nThe application follows a tab-based navigation pattern optimized for mobile devices with dedicated pages for home, Bible study, hymnal, notes, store, and settings.\n\n## Backend Architecture\nThe server uses **Express.js** with **TypeScript** in a RESTful API design:\n- **Express** framework for HTTP server and middleware\n- **ESM modules** for modern JavaScript module system\n- **Memory-based storage** for development (designed to be extended with database)\n- **Type-safe schemas** using Zod for data validation\n- **Vite integration** for seamless development experience\n\nThe backend is structured to support future database integration while maintaining simple in-memory storage for immediate functionality.\n\n## Data Storage Solutions\n**PostgreSQL with Drizzle ORM**:\n- **Drizzle ORM** configured for PostgreSQL dialect\n- **Neon Database** integration via connection string\n- **Shared schema definitions** between client and server using Zod\n- **Migration system** with drizzle-kit for database versioning\n- **Local storage fallback** for client-side data persistence\n\nThe database schema supports user profiles, notes, Bible content, devotionals, and hymns with proper typing and validation.\n\n## Component Architecture\n**Modular UI system** built on shadcn/ui foundation:\n- **Radix UI primitives** for accessible, unstyled components\n- **Custom mobile container** for consistent mobile viewport handling\n- **Responsive design patterns** with mobile-first approach\n- **Theme system** supporting light/dark modes with CSS custom properties\n- **Reusable form components** with proper validation and error handling\n\n## Authentication & User Management\n**Local-first approach** with future extensibility:\n- **Client-side user profiles** stored in localStorage\n- **No authentication required** for core functionality\n- **User onboarding flow** for name and profile setup\n- **Settings persistence** across app sessions\n\n# External Dependencies\n\n## UI and Styling\n- **@radix-ui/react-*** - Comprehensive set of accessible UI primitives for dialogs, forms, navigation, and interactive components\n- **tailwindcss** - Utility-first CSS framework for responsive design\n- **class-variance-authority** & **clsx** - Type-safe component styling with conditional classes\n- **lucide-react** - Modern icon library with consistent design language\n\n## State Management and Data Fetching\n- **@tanstack/react-query** - Server state management with caching, background updates, and error handling\n- **wouter** - Lightweight client-side routing alternative to React Router\n\n## Database and ORM\n- **drizzle-orm** - Type-safe SQL ORM with excellent TypeScript integration\n- **@neondatabase/serverless** - Serverless PostgreSQL database connection for modern deployment\n- **drizzle-kit** - Database migration and introspection toolkit\n\n## Development and Build Tools\n- **vite** - Fast build tool with hot module replacement and optimized production builds\n- **@vitejs/plugin-react** - Official React integration for Vite\n- **typescript** - Static type checking for enhanced developer experience\n- **@replit/vite-plugin-runtime-error-modal** - Development error handling specific to Replit environment\n\n## Form Handling and Validation\n- **@hookform/resolvers** - Validation library integrations for React Hook Form\n- **zod** - TypeScript-first schema validation for runtime type checking\n\n## Payment Integration (Future)\n- **@stripe/stripe-js** & **@stripe/react-stripe-js** - Payment processing for store functionality\n- **connect-pg-simple** - PostgreSQL session store for user sessions","size_bytes":4629},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\", '[data-theme=\"dark\"]'],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"system-ui\", \"sans-serif\"],\n        serif: [\"Crimson Text\", \"serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2338},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/App_1757613361815.js":{"content":"import 'react-native-gesture-handler';\nimport React, { useEffect, useState } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { ThemeProvider, useTheme } from './src/contexts/ThemeContext';\nimport BottomTabNavigator from './src/components/BottomTabNavigator';\nimport WelcomeScreen from './src/screens/WelcomeScreen';\nimport { notificationService } from './src/utils/notifications';\nimport { storage } from './src/utils/storage';\nimport './global.css';\n\nfunction AppContent() {\n  const { theme, isDarkMode } = useTheme();\n  const [isLoading, setIsLoading] = useState(true);\n  const [showWelcome, setShowWelcome] = useState(false);\n\n  useEffect(() => {\n    checkFirstTime();\n    initializeNotifications();\n  }, []);\n\n  const checkFirstTime = async () => {\n    try {\n      const hasCompletedWelcome = await storage.getItem('hasCompletedWelcome');\n      setShowWelcome(!hasCompletedWelcome);\n    } catch (error) {\n      console.error('Erro ao verificar primeira execução:', error);\n      setShowWelcome(true); // Por segurança, mostra a tela de boas-vindas\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const initializeNotifications = async () => {\n    try {\n      await notificationService.initialize();\n      console.log('Sistema de notificações inicializado');\n    } catch (error) {\n      console.error('Erro ao inicializar notificações:', error);\n    }\n  };\n\n  const handleWelcomeComplete = () => {\n    setShowWelcome(false);\n  };\n\n  if (isLoading) {\n    return null; // Ou uma tela de loading se preferir\n  }\n\n  if (showWelcome) {\n    return (\n      <SafeAreaProvider>\n        <WelcomeScreen onComplete={handleWelcomeComplete} />\n        <StatusBar style={isDarkMode ? 'light' : 'dark'} />\n      </SafeAreaProvider>\n    );\n  }\n\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer>\n        <BottomTabNavigator />\n        <StatusBar style={isDarkMode ? 'light' : 'dark'} />\n      </NavigationContainer>\n    </SafeAreaProvider>\n  );\n}\n\nexport default function App() {\n  return (\n    <ThemeProvider>\n      <AppContent />\n    </ThemeProvider>\n  );\n}\n","size_bytes":2264},"attached_assets/App_1757613599465.js":{"content":"import 'react-native-gesture-handler';\nimport React, { useEffect, useState } from 'react';\nimport { StyleSheet } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { ThemeProvider, useTheme } from './src/contexts/ThemeContext';\nimport BottomTabNavigator from './src/components/BottomTabNavigator';\nimport WelcomeScreen from './src/screens/WelcomeScreen';\nimport { notificationService } from './src/utils/notifications';\nimport { storage } from './src/utils/storage';\nimport './global.css';\n\nfunction AppContent() {\n  const { theme, isDarkMode } = useTheme();\n  const [isLoading, setIsLoading] = useState(true);\n  const [showWelcome, setShowWelcome] = useState(false);\n\n  useEffect(() => {\n    checkFirstTime();\n    initializeNotifications();\n  }, []);\n\n  const checkFirstTime = async () => {\n    try {\n      const hasCompletedWelcome = await storage.getItem('hasCompletedWelcome');\n      setShowWelcome(!hasCompletedWelcome);\n    } catch (error) {\n      console.error('Erro ao verificar primeira execução:', error);\n      setShowWelcome(true); // Por segurança, mostra a tela de boas-vindas\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const initializeNotifications = async () => {\n    try {\n      await notificationService.initialize();\n      console.log('Sistema de notificações inicializado');\n    } catch (error) {\n      console.error('Erro ao inicializar notificações:', error);\n    }\n  };\n\n  const handleWelcomeComplete = () => {\n    setShowWelcome(false);\n  };\n\n  if (isLoading) {\n    return null; // Ou uma tela de loading se preferir\n  }\n\n  if (showWelcome) {\n    return (\n      <SafeAreaProvider>\n        <WelcomeScreen onComplete={handleWelcomeComplete} />\n        <StatusBar style={isDarkMode ? 'light' : 'dark'} />\n      </SafeAreaProvider>\n    );\n  }\n\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer>\n        <BottomTabNavigator />\n        <StatusBar style={isDarkMode ? 'light' : 'dark'} />\n      </NavigationContainer>\n    </SafeAreaProvider>\n  );\n}\n\nexport default function App() {\n  return (\n    <ThemeProvider>\n      <AppContent />\n    </ThemeProvider>\n  );\n}\n","size_bytes":2264},"attached_assets/CORREÇÕES_APLICADAS_1757613361817.md":{"content":"# Correções Aplicadas - App Cristão\n\n## 🔧 **Problemas Corrigidos pelo Arquiteto**\n\n### ✅ **1. Correção de Ícones (CRÍTICO)**\n- **Problema**: Uso de `react-native-vector-icons` incompatível com Expo Go\n- **Solução**: Migração para `@expo/vector-icons` (MaterialIcons)\n- **Arquivos Atualizados**: \n  - `src/components/BottomTabNavigator.js`\n  - `src/screens/HomeScreen.js`\n  - `src/screens/BibleScreen.js`\n  - `src/screens/HymnsScreen.js`\n  - `src/screens/SettingsScreen.js`\n\n### ✅ **2. Sistema de Notificações (CRÍTICO)**\n- **Problema**: `cancelScheduledNotificationAsync` com ID string inválido\n- **Solução**: Uso correto das APIs de notificação do Expo\n- **Correções**:\n  - Cancelamento correto de notificações\n  - Armazenamento de IDs retornados pela API\n  - Verificação de permissões adequada\n\n### ✅ **3. Funcionalidade de Links Sociais**\n- **Problema**: Apenas logs no console, sem funcionalidade real\n- **Solução**: Implementação com `expo-linking`\n- **Funcionalidades**:\n  - Abertura real do Instagram, YouTube, Facebook\n  - Navegação para loja a partir da tela inicial\n\n### ✅ **4. Persistência de Tamanho de Fonte**\n- **Problema**: Ajuste de fonte não persistia no dispositivo\n- **Solução**: Salvamento automático no AsyncStorage\n- **Implementado em**:\n  - Tela da Bíblia\n  - Tela de Hinos\n  - Preferências salvas separadamente\n\n### ✅ **5. Configuração de Build (app.json)**\n- **Problema**: Referência a ícone inexistente e permissões desnecessárias\n- **Soluções**:\n  - Removido `notification.icon` inexistente\n  - Removido `WRITE_EXTERNAL_STORAGE` (desnecessário)\n  - Removido `SCHEDULE_EXACT_ALARM` (desnecessário)\n  - Mantidas apenas permissões essenciais\n\n---\n\n## 🎯 **Status Final do Projeto**\n\n### ✅ **Funcionalidades Implementadas e Funcionais**\n1. **Tema Escuro Completo** - Azul escuro, grafite e dourado ✅\n2. **Notificações Push Inteligentes** - 2-3x por semana ✅\n3. **Notificações Diárias** - Versículo às 8:00 AM ✅\n4. **Container da Loja** - Tela inicial + WebView dedicada ✅\n5. **Redes Sociais** - Instagram, YouTube, Facebook ✅\n6. **Perfil do Usuário** - Nome e foto de perfil ✅\n7. **Sistema de Feedback** - E-mail direto ✅\n8. **Navegação Inferior** - 5 abas fixas ✅\n9. **Layout Otimizado** - Sem margens excessivas ✅\n10. **Controle de Fonte** - Persistente para Bíblia e Hinos ✅\n\n### ✅ **Compatibilidade e Build**\n- **Expo Go**: Totalmente compatível ✅\n- **EAS Build**: Configurado para Android/iOS ✅\n- **Dependências**: Todas alinhadas com Expo SDK 54 ✅\n- **Permissões**: Apenas as necessárias ✅\n\n---\n\n## 🚀 **Próximos Passos para o Usuário**\n\n1. **Personalização**:\n   - Substituir e-mail em `SettingsScreen.js` linha 67\n   - Substituir URL da loja em `StoreScreen.js` linha 12\n\n2. **Build para Produção**:\n   ```bash\n   npm install -g @expo/cli eas-cli\n   expo login\n   eas build:configure\n   eas build --platform android --profile preview\n   ```\n\n3. **Teste no Dispositivo**:\n   - Instalar Expo Go\n   - Escanear QR code exibido no terminal\n   - Testar todas as funcionalidades\n\n---\n\n## 🔍 **Verificações de Qualidade**\n\n### ✅ **Código Limpo**\n- Estrutura organizada em pastas\n- Componentes reutilizáveis\n- Contextos para estado global\n- Utilitários separados\n\n### ✅ **Performance**\n- Loading lazy de componentes\n- AsyncStorage para persistência\n- Algoritmos otimizados para versículos\n- Gerenciamento eficiente de estado\n\n### ✅ **UX/UI**\n- Design profissional e minimalista\n- Navegação intuitiva\n- Feedback visual adequado\n- Responsividade para diferentes telas\n\n### ✅ **Segurança e Privacidade**\n- Dados salvos apenas localmente\n- Sem coleta de dados pessoais\n- Permissões mínimas necessárias\n- Tratamento seguro de URLs externas\n\n---\n\n**🙏 O app cristão está 100% funcional e pronto para abençoar vidas!**","size_bytes":3882},"attached_assets/CORREÇÕES_APLICADAS_1757613599467.md":{"content":"# Correções Aplicadas - App Cristão\n\n## 🔧 **Problemas Corrigidos pelo Arquiteto**\n\n### ✅ **1. Correção de Ícones (CRÍTICO)**\n- **Problema**: Uso de `react-native-vector-icons` incompatível com Expo Go\n- **Solução**: Migração para `@expo/vector-icons` (MaterialIcons)\n- **Arquivos Atualizados**: \n  - `src/components/BottomTabNavigator.js`\n  - `src/screens/HomeScreen.js`\n  - `src/screens/BibleScreen.js`\n  - `src/screens/HymnsScreen.js`\n  - `src/screens/SettingsScreen.js`\n\n### ✅ **2. Sistema de Notificações (CRÍTICO)**\n- **Problema**: `cancelScheduledNotificationAsync` com ID string inválido\n- **Solução**: Uso correto das APIs de notificação do Expo\n- **Correções**:\n  - Cancelamento correto de notificações\n  - Armazenamento de IDs retornados pela API\n  - Verificação de permissões adequada\n\n### ✅ **3. Funcionalidade de Links Sociais**\n- **Problema**: Apenas logs no console, sem funcionalidade real\n- **Solução**: Implementação com `expo-linking`\n- **Funcionalidades**:\n  - Abertura real do Instagram, YouTube, Facebook\n  - Navegação para loja a partir da tela inicial\n\n### ✅ **4. Persistência de Tamanho de Fonte**\n- **Problema**: Ajuste de fonte não persistia no dispositivo\n- **Solução**: Salvamento automático no AsyncStorage\n- **Implementado em**:\n  - Tela da Bíblia\n  - Tela de Hinos\n  - Preferências salvas separadamente\n\n### ✅ **5. Configuração de Build (app.json)**\n- **Problema**: Referência a ícone inexistente e permissões desnecessárias\n- **Soluções**:\n  - Removido `notification.icon` inexistente\n  - Removido `WRITE_EXTERNAL_STORAGE` (desnecessário)\n  - Removido `SCHEDULE_EXACT_ALARM` (desnecessário)\n  - Mantidas apenas permissões essenciais\n\n---\n\n## 🎯 **Status Final do Projeto**\n\n### ✅ **Funcionalidades Implementadas e Funcionais**\n1. **Tema Escuro Completo** - Azul escuro, grafite e dourado ✅\n2. **Notificações Push Inteligentes** - 2-3x por semana ✅\n3. **Notificações Diárias** - Versículo às 8:00 AM ✅\n4. **Container da Loja** - Tela inicial + WebView dedicada ✅\n5. **Redes Sociais** - Instagram, YouTube, Facebook ✅\n6. **Perfil do Usuário** - Nome e foto de perfil ✅\n7. **Sistema de Feedback** - E-mail direto ✅\n8. **Navegação Inferior** - 5 abas fixas ✅\n9. **Layout Otimizado** - Sem margens excessivas ✅\n10. **Controle de Fonte** - Persistente para Bíblia e Hinos ✅\n\n### ✅ **Compatibilidade e Build**\n- **Expo Go**: Totalmente compatível ✅\n- **EAS Build**: Configurado para Android/iOS ✅\n- **Dependências**: Todas alinhadas com Expo SDK 54 ✅\n- **Permissões**: Apenas as necessárias ✅\n\n---\n\n## 🚀 **Próximos Passos para o Usuário**\n\n1. **Personalização**:\n   - Substituir e-mail em `SettingsScreen.js` linha 67\n   - Substituir URL da loja em `StoreScreen.js` linha 12\n\n2. **Build para Produção**:\n   ```bash\n   npm install -g @expo/cli eas-cli\n   expo login\n   eas build:configure\n   eas build --platform android --profile preview\n   ```\n\n3. **Teste no Dispositivo**:\n   - Instalar Expo Go\n   - Escanear QR code exibido no terminal\n   - Testar todas as funcionalidades\n\n---\n\n## 🔍 **Verificações de Qualidade**\n\n### ✅ **Código Limpo**\n- Estrutura organizada em pastas\n- Componentes reutilizáveis\n- Contextos para estado global\n- Utilitários separados\n\n### ✅ **Performance**\n- Loading lazy de componentes\n- AsyncStorage para persistência\n- Algoritmos otimizados para versículos\n- Gerenciamento eficiente de estado\n\n### ✅ **UX/UI**\n- Design profissional e minimalista\n- Navegação intuitiva\n- Feedback visual adequado\n- Responsividade para diferentes telas\n\n### ✅ **Segurança e Privacidade**\n- Dados salvos apenas localmente\n- Sem coleta de dados pessoais\n- Permissões mínimas necessárias\n- Tratamento seguro de URLs externas\n\n---\n\n**🙏 O app cristão está 100% funcional e pronto para abençoar vidas!**","size_bytes":3882},"attached_assets/INSTRUÇÕES_PARA_USAR_1757613361820.md":{"content":"# App Cristão - Instruções para Uso\n\n## ✅ **Projeto Concluído com Sucesso!**\n\nSeu app cristão React Native + Expo foi atualizado com todas as funcionalidades solicitadas, mantendo o design profissional, moderno e minimalista, transmitindo a mensagem central: **\"Você não está sozinho, viva com propósito\"**.\n\n---\n\n## 🎯 **Funcionalidades Implementadas**\n\n### ✅ **1. Tema Escuro Completo**\n- **Cores**: Azul escuro, cinza grafite e dourado conforme solicitado\n- **Toggle nas Configurações**: Usuário pode alternar entre tema claro e escuro\n- **Persistência**: Preferência salva automaticamente no dispositivo\n\n### ✅ **2. Notificações Push Inteligentes**\n- **Frequência**: 2-3 vezes por semana (terça, quinta e sábado às 19h)\n- **Perguntas Contextuais**: \"Como você está se sentindo hoje?\", etc.\n- **Respostas Direcionadas**: Cada resposta direciona para versículos específicos\n- **Lista Pré-programada**: 5 perguntas diferentes para evitar repetição\n\n### ✅ **3. Notificações Diárias**\n- **Horário**: 8:00 AM todos os dias\n- **Conteúdo**: Versículo/devocional do dia\n- **Algoritmo Determinístico**: Mesmo versículo por dia para todos os usuários\n\n### ✅ **4. Container da Loja**\n- **Localização**: Tela inicial, abaixo do versículo do dia\n- **Design**: Container elegante com ícone e call-to-action\n- **WebView Integrada**: Tela dedicada da loja com navegação web\n- **Acesso**: Também disponível na aba \"Loja\" na navegação inferior\n\n### ✅ **5. Redes Sociais**\n- **Localização**: Tela inicial, abaixo da loja\n- **Plataformas**: Instagram, YouTube, Facebook\n- **Design**: Botões coloridos com ícones específicos\n- **Funcionalidade**: Links diretos para redes sociais\n\n### ✅ **6. Perfil do Usuário**\n- **Nome**: Campo editável salvo localmente\n- **Foto de Perfil**: Seleção da galeria com câmera\n- **Armazenamento**: Dados salvos com AsyncStorage\n- **Localização**: Aba \"Configurações\"\n\n### ✅ **7. Sistema de Feedback**\n- **Localização**: Aba Configurações\n- **Funcionalidade**: Caixa de texto para sugestões\n- **Envio**: E-mail direto para contato da empresa\n- **Confirmação**: Mensagem de sucesso após envio\n\n### ✅ **8. Navegação Inferior Fixa**\n- **5 Abas**: Início, Bíblia, Hinário, Loja, Configurações\n- **Sempre Visível**: Em todas as telas principais\n- **Ícones Intuitivos**: MaterialIcons para cada aba\n- **Cores Dinâmicas**: Adaptam ao tema atual\n\n### ✅ **9. Layout Otimizado**\n- **Sem Margens Excessivas**: Container preenche horizontalmente\n- **Estética Limpa**: Design minimalista e profissional\n- **Responsivo**: Adapta-se a diferentes tamanhos de tela\n\n### ✅ **10. Funcionalidades da Bíblia**\n- **Controle de Fonte**: Botões A+/A- para ajustar tamanho\n- **Persistência**: Preferência de fonte salva no dispositivo\n- **Busca**: Pesquisa por livros da Bíblia\n- **Navegação**: Seleção fácil de capítulos e versículos\n\n---\n\n## 🚀 **Como Testar o App**\n\n### **1. Ambiente de Desenvolvimento**\nO app está configurado e funcionando no Expo. Você pode:\n\n1. **Testar no Navegador Web**: Use o comando `npm run web`\n2. **Testar no Simulador**: Use `npm run ios` ou `npm run android`\n3. **Testar no Dispositivo Real**: \n   - Instale o Expo Go no seu celular\n   - Escaneie o QR code que aparece no terminal\n\n### **2. QR Code Disponível**\nO Expo está rodando e exibindo o QR code. Escaneie com:\n- **Android**: App Expo Go\n- **iOS**: Câmera nativa ou Expo Go\n\n---\n\n## 📱 **Como Gerar APK/IPA para Produção**\n\n### **🤖 Para Android (APK)**\n\n1. **Instalar EAS CLI**:\n```bash\nnpm install -g @expo/cli\nnpm install -g eas-cli\n```\n\n2. **Login no Expo**:\n```bash\nexpo login\n```\n\n3. **Configurar Build**:\n```bash\neas build:configure\n```\n\n4. **Gerar APK**:\n```bash\neas build --platform android --profile preview\n```\n\n5. **Baixar APK**: O link será fornecido no terminal após o build\n\n### **🍎 Para iOS (IPA)**\n\n1. **Configurar Conta Apple Developer** (obrigatório):\n   - Tenha uma conta Apple Developer ativa\n   - Configure certificados no Apple Developer Portal\n\n2. **Gerar IPA**:\n```bash\neas build --platform ios --profile preview\n```\n\n3. **Distribuição**: Use TestFlight ou instale diretamente\n\n---\n\n## ⚙️ **Configurações Importantes**\n\n### **📧 E-mail da Empresa**\nNo arquivo `src/screens/SettingsScreen.js`, linha 67:\n```javascript\nrecipients: ['contato@exemploapp.com'], // ⚠️ SUBSTITUA pelo e-mail real\n```\n\n### **🏪 URL da Loja**\nNo arquivo `src/screens/StoreScreen.js`, linha 12:\n```javascript\nconst storeUrl = 'https://exemplo-loja-crista.com'; // ⚠️ SUBSTITUA pela URL real\n```\n\n### **📱 Bundle Identifiers**\nNo arquivo `app.json`:\n- **Android**: `com.christianapp.faithcompanion`\n- **iOS**: `com.christianapp.faithcompanion`\n\n---\n\n## 🎨 **Personalização de Cores**\n\n### **Tema Claro**\n- Fundo: Branco (#ffffff)\n- Primário: Azul (#0070f3)\n- Secundário: Dourado (#eab308)\n- Texto: Azul escuro (#0f172a)\n\n### **Tema Escuro**\n- Fundo: Azul escuro (#0f172a)\n- Primário: Azul claro (#36abff)\n- Secundário: Dourado claro (#fde047)\n- Texto: Branco (#f8fafc)\n\n---\n\n## 📂 **Estrutura do Projeto**\n\n```\nsrc/\n├── components/          # Componentes reutilizáveis\n├── contexts/           # Context API (temas, etc.)\n├── data/              # Dados da Bíblia, hinos, versículos\n├── hooks/             # Hooks customizados\n├── screens/           # Telas do aplicativo\n└── utils/             # Utilitários (storage, notificações)\n```\n\n---\n\n## 🔔 **Sistema de Notificações**\n\nAs notificações são inicializadas automaticamente quando o app carrega:\n\n- **Permissões**: Solicitadas automaticamente na primeira execução\n- **Agendamento**: Configurado para horários específicos\n- **Teste**: Use `notificationService.sendTestNotification()` para testar\n\n---\n\n## ✅ **Checklist Final**\n\n- ✅ Tema escuro implementado\n- ✅ Notificações inteligentes configuradas\n- ✅ Notificações diárias funcionando\n- ✅ Loja integrada com WebView\n- ✅ Redes sociais conectadas\n- ✅ Perfil de usuário completo\n- ✅ Sistema de feedback por e-mail\n- ✅ Navegação inferior fixa\n- ✅ Layout sem margens excessivas\n- ✅ Controles de fonte na Bíblia\n- ✅ Configuração para builds APK/IPA\n\n---\n\n## 🎯 **Próximos Passos Recomendados**\n\n1. **Substituir URLs e e-mails** pelos dados reais da empresa\n2. **Testar notificações** em dispositivo físico\n3. **Customizar ícones e splash screen** se necessário\n4. **Gerar builds de teste** para validação\n5. **Configurar conta EAS** para builds em produção\n\n---\n\n**🙏 Seu app cristão está pronto para abençoar vidas com a mensagem: \"Você não está sozinho, viva com propósito\"!**","size_bytes":6728},"attached_assets/INSTRUÇÕES_PARA_USAR_1757613599468.md":{"content":"# App Cristão - Instruções para Uso\n\n## ✅ **Projeto Concluído com Sucesso!**\n\nSeu app cristão React Native + Expo foi atualizado com todas as funcionalidades solicitadas, mantendo o design profissional, moderno e minimalista, transmitindo a mensagem central: **\"Você não está sozinho, viva com propósito\"**.\n\n---\n\n## 🎯 **Funcionalidades Implementadas**\n\n### ✅ **1. Tema Escuro Completo**\n- **Cores**: Azul escuro, cinza grafite e dourado conforme solicitado\n- **Toggle nas Configurações**: Usuário pode alternar entre tema claro e escuro\n- **Persistência**: Preferência salva automaticamente no dispositivo\n\n### ✅ **2. Notificações Push Inteligentes**\n- **Frequência**: 2-3 vezes por semana (terça, quinta e sábado às 19h)\n- **Perguntas Contextuais**: \"Como você está se sentindo hoje?\", etc.\n- **Respostas Direcionadas**: Cada resposta direciona para versículos específicos\n- **Lista Pré-programada**: 5 perguntas diferentes para evitar repetição\n\n### ✅ **3. Notificações Diárias**\n- **Horário**: 8:00 AM todos os dias\n- **Conteúdo**: Versículo/devocional do dia\n- **Algoritmo Determinístico**: Mesmo versículo por dia para todos os usuários\n\n### ✅ **4. Container da Loja**\n- **Localização**: Tela inicial, abaixo do versículo do dia\n- **Design**: Container elegante com ícone e call-to-action\n- **WebView Integrada**: Tela dedicada da loja com navegação web\n- **Acesso**: Também disponível na aba \"Loja\" na navegação inferior\n\n### ✅ **5. Redes Sociais**\n- **Localização**: Tela inicial, abaixo da loja\n- **Plataformas**: Instagram, YouTube, Facebook\n- **Design**: Botões coloridos com ícones específicos\n- **Funcionalidade**: Links diretos para redes sociais\n\n### ✅ **6. Perfil do Usuário**\n- **Nome**: Campo editável salvo localmente\n- **Foto de Perfil**: Seleção da galeria com câmera\n- **Armazenamento**: Dados salvos com AsyncStorage\n- **Localização**: Aba \"Configurações\"\n\n### ✅ **7. Sistema de Feedback**\n- **Localização**: Aba Configurações\n- **Funcionalidade**: Caixa de texto para sugestões\n- **Envio**: E-mail direto para contato da empresa\n- **Confirmação**: Mensagem de sucesso após envio\n\n### ✅ **8. Navegação Inferior Fixa**\n- **5 Abas**: Início, Bíblia, Hinário, Loja, Configurações\n- **Sempre Visível**: Em todas as telas principais\n- **Ícones Intuitivos**: MaterialIcons para cada aba\n- **Cores Dinâmicas**: Adaptam ao tema atual\n\n### ✅ **9. Layout Otimizado**\n- **Sem Margens Excessivas**: Container preenche horizontalmente\n- **Estética Limpa**: Design minimalista e profissional\n- **Responsivo**: Adapta-se a diferentes tamanhos de tela\n\n### ✅ **10. Funcionalidades da Bíblia**\n- **Controle de Fonte**: Botões A+/A- para ajustar tamanho\n- **Persistência**: Preferência de fonte salva no dispositivo\n- **Busca**: Pesquisa por livros da Bíblia\n- **Navegação**: Seleção fácil de capítulos e versículos\n\n---\n\n## 🚀 **Como Testar o App**\n\n### **1. Ambiente de Desenvolvimento**\nO app está configurado e funcionando no Expo. Você pode:\n\n1. **Testar no Navegador Web**: Use o comando `npm run web`\n2. **Testar no Simulador**: Use `npm run ios` ou `npm run android`\n3. **Testar no Dispositivo Real**: \n   - Instale o Expo Go no seu celular\n   - Escaneie o QR code que aparece no terminal\n\n### **2. QR Code Disponível**\nO Expo está rodando e exibindo o QR code. Escaneie com:\n- **Android**: App Expo Go\n- **iOS**: Câmera nativa ou Expo Go\n\n---\n\n## 📱 **Como Gerar APK/IPA para Produção**\n\n### **🤖 Para Android (APK)**\n\n1. **Instalar EAS CLI**:\n```bash\nnpm install -g @expo/cli\nnpm install -g eas-cli\n```\n\n2. **Login no Expo**:\n```bash\nexpo login\n```\n\n3. **Configurar Build**:\n```bash\neas build:configure\n```\n\n4. **Gerar APK**:\n```bash\neas build --platform android --profile preview\n```\n\n5. **Baixar APK**: O link será fornecido no terminal após o build\n\n### **🍎 Para iOS (IPA)**\n\n1. **Configurar Conta Apple Developer** (obrigatório):\n   - Tenha uma conta Apple Developer ativa\n   - Configure certificados no Apple Developer Portal\n\n2. **Gerar IPA**:\n```bash\neas build --platform ios --profile preview\n```\n\n3. **Distribuição**: Use TestFlight ou instale diretamente\n\n---\n\n## ⚙️ **Configurações Importantes**\n\n### **📧 E-mail da Empresa**\nNo arquivo `src/screens/SettingsScreen.js`, linha 67:\n```javascript\nrecipients: ['contato@exemploapp.com'], // ⚠️ SUBSTITUA pelo e-mail real\n```\n\n### **🏪 URL da Loja**\nNo arquivo `src/screens/StoreScreen.js`, linha 12:\n```javascript\nconst storeUrl = 'https://exemplo-loja-crista.com'; // ⚠️ SUBSTITUA pela URL real\n```\n\n### **📱 Bundle Identifiers**\nNo arquivo `app.json`:\n- **Android**: `com.christianapp.faithcompanion`\n- **iOS**: `com.christianapp.faithcompanion`\n\n---\n\n## 🎨 **Personalização de Cores**\n\n### **Tema Claro**\n- Fundo: Branco (#ffffff)\n- Primário: Azul (#0070f3)\n- Secundário: Dourado (#eab308)\n- Texto: Azul escuro (#0f172a)\n\n### **Tema Escuro**\n- Fundo: Azul escuro (#0f172a)\n- Primário: Azul claro (#36abff)\n- Secundário: Dourado claro (#fde047)\n- Texto: Branco (#f8fafc)\n\n---\n\n## 📂 **Estrutura do Projeto**\n\n```\nsrc/\n├── components/          # Componentes reutilizáveis\n├── contexts/           # Context API (temas, etc.)\n├── data/              # Dados da Bíblia, hinos, versículos\n├── hooks/             # Hooks customizados\n├── screens/           # Telas do aplicativo\n└── utils/             # Utilitários (storage, notificações)\n```\n\n---\n\n## 🔔 **Sistema de Notificações**\n\nAs notificações são inicializadas automaticamente quando o app carrega:\n\n- **Permissões**: Solicitadas automaticamente na primeira execução\n- **Agendamento**: Configurado para horários específicos\n- **Teste**: Use `notificationService.sendTestNotification()` para testar\n\n---\n\n## ✅ **Checklist Final**\n\n- ✅ Tema escuro implementado\n- ✅ Notificações inteligentes configuradas\n- ✅ Notificações diárias funcionando\n- ✅ Loja integrada com WebView\n- ✅ Redes sociais conectadas\n- ✅ Perfil de usuário completo\n- ✅ Sistema de feedback por e-mail\n- ✅ Navegação inferior fixa\n- ✅ Layout sem margens excessivas\n- ✅ Controles de fonte na Bíblia\n- ✅ Configuração para builds APK/IPA\n\n---\n\n## 🎯 **Próximos Passos Recomendados**\n\n1. **Substituir URLs e e-mails** pelos dados reais da empresa\n2. **Testar notificações** em dispositivo físico\n3. **Customizar ícones e splash screen** se necessário\n4. **Gerar builds de teste** para validação\n5. **Configurar conta EAS** para builds em produção\n\n---\n\n**🙏 Seu app cristão está pronto para abençoar vidas com a mensagem: \"Você não está sozinho, viva com propósito\"!**","size_bytes":6728},"attached_assets/babel.config_1757613361816.js":{"content":"module.exports = function(api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n  };\n};","size_bytes":106},"attached_assets/babel.config_1757613599466.js":{"content":"module.exports = function(api) {\n  api.cache(true);\n  return {\n    presets: ['babel-preset-expo'],\n  };\n};","size_bytes":106},"attached_assets/global_1757613361819.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;","size_bytes":58},"attached_assets/global_1757613599468.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;","size_bytes":58},"attached_assets/index_1757613361819.js":{"content":"import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","size_bytes":307},"attached_assets/index_1757613599468.js":{"content":"import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","size_bytes":307},"attached_assets/metro.config_1757613361821.js":{"content":"const { getDefaultConfig } = require('expo/metro-config');\nconst { withNativeWind } = require('nativewind/metro');\n\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = withNativeWind(config, { input: './global.css' });","size_bytes":228},"attached_assets/metro.config_1757613599469.js":{"content":"const { getDefaultConfig } = require('expo/metro-config');\nconst { withNativeWind } = require('nativewind/metro');\n\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = withNativeWind(config, { input: './global.css' });","size_bytes":228},"attached_assets/nativewind-env.d_1757613361808.ts":{"content":"/// <reference types=\"nativewind/types\" />\n\n// NOTE: This file should not be edited and should be committed with your source code. It is generated by NativeWind.","size_bytes":161},"attached_assets/nativewind-env.d_1757613599461.ts":{"content":"/// <reference types=\"nativewind/types\" />\n\n// NOTE: This file should not be edited and should be committed with your source code. It is generated by NativeWind.","size_bytes":161},"attached_assets/replit_1757613361812.md":{"content":"# Overview\n\nThis is a Christian mobile application built with React Native + Expo, designed to provide spiritual comfort and guidance with the core message \"Você não está sozinho, viva com propósito\" (You are not alone, live with purpose). The app features daily Bible verses, devotionals, complete Bible reader, hymn player, intelligent push notifications, user profiles, and a modern dark/light theme system.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Mobile Architecture\nThe app uses React Native + Expo for cross-platform mobile development:\n- **React Native 0.81.4** with Expo SDK 54 for native mobile functionality\n- **React Navigation** for seamless navigation between screens\n- **NativeWind (Tailwind CSS)** for consistent styling across platforms\n- **AsyncStorage** for local data persistence\n- **Context API** for state management (theme, user preferences)\n- **Native Icons** using react-native-vector-icons\n\nThe app follows a tab-based navigation pattern with professional, modern, and minimalist design.\n\n## Core Features Implementation\n- **Daily Verse Algorithm**: Device-based deterministic selection ensuring users get the same verse per day\n- **Intelligent Push Notifications**: Contextual questions 2-3x per week with mood-based verse responses\n- **Dual Theme System**: Light and dark themes with blue, gold, and graphite color scheme\n- **User Profile Management**: Local photo storage and name persistence\n- **Font Size Controls**: Adjustable text size for Bible and hymns reading\n- **WebView Store Integration**: Embedded store functionality\n- **Social Media Integration**: Direct links to Instagram, YouTube, and Facebook\n- **Email Feedback System**: Direct suggestion submissions to company email\n\n## Data Storage Solutions\nImplements a local-first approach with offline functionality:\n- **AsyncStorage**: User preferences, profile data, theme settings, and app configurations\n- **JSON Data Files**: Bible content (ACF), hymns (Harpa Cristã), verses, and devotionals\n- **Local Image Storage**: Profile pictures stored on device\n- **No Cloud Dependencies**: Full offline functionality for core features\n\n## Navigation Structure\n- **Home Tab**: Daily verse, store integration, social media links, motivational content\n- **Bible Tab**: Complete ACF Bible with search, font controls, and verse navigation\n- **Hymns Tab**: Full Harpa Cristã hymnal with search and font adjustments\n- **Store Tab**: WebView integration for Christian products\n- **Settings Tab**: User profile, theme toggle, notifications, feedback system\n\n## Notification System\n- **Daily Verse Notifications**: Scheduled for 8:00 AM daily\n- **Intelligent Questions**: Tuesday, Thursday, Saturday at 7:00 PM\n- **Mood-Based Responses**: Contextual verse selection based on user responses\n- **Permission Management**: Graceful handling of notification permissions\n\n# External Dependencies\n\n## Core Dependencies\n- **Expo SDK 54** for development platform and native APIs\n- **React Native 0.81.4** for mobile app framework\n- **React Navigation** for app navigation (Bottom Tabs + Stack)\n- **NativeWind** for Tailwind CSS styling in React Native\n- **AsyncStorage** for local data persistence\n\n## Expo Modules\n- **expo-notifications** for intelligent push notification system\n- **expo-image-picker** for profile photo functionality\n- **expo-mail-composer** for feedback system\n- **expo-web-browser** for social media links\n- **expo-constants** and **expo-device** for app configuration\n\n## UI and Styling\n- **react-native-vector-icons** for consistent iconography\n- **react-native-paper** for Material Design components\n- **react-native-webview** for embedded store functionality\n- **react-native-safe-area-context** for proper screen handling\n\n## Development Tools\n- **TypeScript** for type safety and better development experience\n- **Metro Bundler** for React Native bundling\n- **EAS Build** configuration for APK/IPA generation\n- **Tailwind CSS** with NativeWind preset for styling\n\n## Content Sources\n- **Almeida Corrigida Fiel (ACF) Bible**: Complete Portuguese Bible translation\n- **Harpa Cristã**: Traditional Christian hymnal (611 hymns)\n- **Daily Verses**: Curated collection of inspirational Bible verses\n- **Daily Devotionals**: Custom spiritual guidance content\n\n# Build Configuration\n\n## APK Generation (Android)\n1. Install EAS CLI: `npm install -g @expo/cli`\n2. Configure build: `eas build:configure`\n3. Build APK: `eas build --platform android --profile preview`\n\n## IPA Generation (iOS)\n1. Ensure Apple Developer account setup\n2. Configure iOS bundle identifier in app.json\n3. Build IPA: `eas build --platform ios --profile preview`\n\nThe application maintains a local-first, privacy-focused approach with no server dependencies, ensuring users can access spiritual content offline while receiving intelligent, contextual guidance through push notifications.","size_bytes":4919},"attached_assets/replit_1757613599463.md":{"content":"# Overview\n\nThis is a Christian mobile application built with React Native + Expo, designed to provide spiritual comfort and guidance with the core message \"Você não está sozinho, viva com propósito\" (You are not alone, live with purpose). The app features daily Bible verses, devotionals, complete Bible reader, hymn player, intelligent push notifications, user profiles, and a modern dark/light theme system.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Mobile Architecture\nThe app uses React Native + Expo for cross-platform mobile development:\n- **React Native 0.81.4** with Expo SDK 54 for native mobile functionality\n- **React Navigation** for seamless navigation between screens\n- **NativeWind (Tailwind CSS)** for consistent styling across platforms\n- **AsyncStorage** for local data persistence\n- **Context API** for state management (theme, user preferences)\n- **Native Icons** using react-native-vector-icons\n\nThe app follows a tab-based navigation pattern with professional, modern, and minimalist design.\n\n## Core Features Implementation\n- **Daily Verse Algorithm**: Device-based deterministic selection ensuring users get the same verse per day\n- **Intelligent Push Notifications**: Contextual questions 2-3x per week with mood-based verse responses\n- **Dual Theme System**: Light and dark themes with blue, gold, and graphite color scheme\n- **User Profile Management**: Local photo storage and name persistence\n- **Font Size Controls**: Adjustable text size for Bible and hymns reading\n- **WebView Store Integration**: Embedded store functionality\n- **Social Media Integration**: Direct links to Instagram, YouTube, and Facebook\n- **Email Feedback System**: Direct suggestion submissions to company email\n\n## Data Storage Solutions\nImplements a local-first approach with offline functionality:\n- **AsyncStorage**: User preferences, profile data, theme settings, and app configurations\n- **JSON Data Files**: Bible content (ACF), hymns (Harpa Cristã), verses, and devotionals\n- **Local Image Storage**: Profile pictures stored on device\n- **No Cloud Dependencies**: Full offline functionality for core features\n\n## Navigation Structure\n- **Home Tab**: Daily verse, store integration, social media links, motivational content\n- **Bible Tab**: Complete ACF Bible with search, font controls, and verse navigation\n- **Hymns Tab**: Full Harpa Cristã hymnal with search and font adjustments\n- **Store Tab**: WebView integration for Christian products\n- **Settings Tab**: User profile, theme toggle, notifications, feedback system\n\n## Notification System\n- **Daily Verse Notifications**: Scheduled for 8:00 AM daily\n- **Intelligent Questions**: Tuesday, Thursday, Saturday at 7:00 PM\n- **Mood-Based Responses**: Contextual verse selection based on user responses\n- **Permission Management**: Graceful handling of notification permissions\n\n# External Dependencies\n\n## Core Dependencies\n- **Expo SDK 54** for development platform and native APIs\n- **React Native 0.81.4** for mobile app framework\n- **React Navigation** for app navigation (Bottom Tabs + Stack)\n- **NativeWind** for Tailwind CSS styling in React Native\n- **AsyncStorage** for local data persistence\n\n## Expo Modules\n- **expo-notifications** for intelligent push notification system\n- **expo-image-picker** for profile photo functionality\n- **expo-mail-composer** for feedback system\n- **expo-web-browser** for social media links\n- **expo-constants** and **expo-device** for app configuration\n\n## UI and Styling\n- **react-native-vector-icons** for consistent iconography\n- **react-native-paper** for Material Design components\n- **react-native-webview** for embedded store functionality\n- **react-native-safe-area-context** for proper screen handling\n\n## Development Tools\n- **TypeScript** for type safety and better development experience\n- **Metro Bundler** for React Native bundling\n- **EAS Build** configuration for APK/IPA generation\n- **Tailwind CSS** with NativeWind preset for styling\n\n## Content Sources\n- **Almeida Corrigida Fiel (ACF) Bible**: Complete Portuguese Bible translation\n- **Harpa Cristã**: Traditional Christian hymnal (611 hymns)\n- **Daily Verses**: Curated collection of inspirational Bible verses\n- **Daily Devotionals**: Custom spiritual guidance content\n\n# Build Configuration\n\n## APK Generation (Android)\n1. Install EAS CLI: `npm install -g @expo/cli`\n2. Configure build: `eas build:configure`\n3. Build APK: `eas build --platform android --profile preview`\n\n## IPA Generation (iOS)\n1. Ensure Apple Developer account setup\n2. Configure iOS bundle identifier in app.json\n3. Build IPA: `eas build --platform ios --profile preview`\n\nThe application maintains a local-first, privacy-focused approach with no server dependencies, ensuring users can access spiritual content offline while receiving intelligent, contextual guidance through push notifications.","size_bytes":4919},"attached_assets/tailwind.config_1757613361812.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./App.{js,jsx,ts,tsx}\",\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n    \"./components/**/*.{js,jsx,ts,tsx}\",\n    \"./screens/**/*.{js,jsx,ts,tsx}\"\n  ],\n  presets: [require(\"nativewind/preset\")],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#f0f7ff',\n          100: '#e0efff',\n          200: '#bae0ff',\n          300: '#7cc7ff',\n          400: '#36abff',\n          500: '#0c8dff',\n          600: '#0070f3',\n          700: '#0052cc',\n          800: '#0d4ba3',\n          900: '#114185',\n          950: '#112951',\n        },\n        dark: {\n          50: '#f8fafc',\n          100: '#f1f5f9',\n          200: '#e2e8f0',\n          300: '#cbd5e1',\n          400: '#94a3b8',\n          500: '#64748b',\n          600: '#475569',\n          700: '#334155',\n          800: '#1e293b',\n          900: '#0f172a',\n          950: '#020617',\n        },\n        gold: {\n          50: '#fefce8',\n          100: '#fef9c3',\n          200: '#fef08a',\n          300: '#fde047',\n          400: '#facc15',\n          500: '#eab308',\n          600: '#ca8a04',\n          700: '#a16207',\n          800: '#854d0e',\n          900: '#713f12',\n          950: '#422006',\n        }\n      },\n      fontFamily: {\n        'sans': ['Inter', 'system-ui', 'sans-serif'],\n        'serif': ['Merriweather', 'serif'],\n      }\n    },\n  },\n  plugins: [],\n}","size_bytes":1407},"attached_assets/tailwind.config_1757613599463.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./App.{js,jsx,ts,tsx}\",\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n    \"./components/**/*.{js,jsx,ts,tsx}\",\n    \"./screens/**/*.{js,jsx,ts,tsx}\"\n  ],\n  presets: [require(\"nativewind/preset\")],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#f0f7ff',\n          100: '#e0efff',\n          200: '#bae0ff',\n          300: '#7cc7ff',\n          400: '#36abff',\n          500: '#0c8dff',\n          600: '#0070f3',\n          700: '#0052cc',\n          800: '#0d4ba3',\n          900: '#114185',\n          950: '#112951',\n        },\n        dark: {\n          50: '#f8fafc',\n          100: '#f1f5f9',\n          200: '#e2e8f0',\n          300: '#cbd5e1',\n          400: '#94a3b8',\n          500: '#64748b',\n          600: '#475569',\n          700: '#334155',\n          800: '#1e293b',\n          900: '#0f172a',\n          950: '#020617',\n        },\n        gold: {\n          50: '#fefce8',\n          100: '#fef9c3',\n          200: '#fef08a',\n          300: '#fde047',\n          400: '#facc15',\n          500: '#eab308',\n          600: '#ca8a04',\n          700: '#a16207',\n          800: '#854d0e',\n          900: '#713f12',\n          950: '#422006',\n        }\n      },\n      fontFamily: {\n        'sans': ['Inter', 'system-ui', 'sans-serif'],\n        'serif': ['Merriweather', 'serif'],\n      }\n    },\n  },\n  plugins: [],\n}","size_bytes":1407},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport Stripe from \"stripe\";\n\n// Initialize Stripe - using the integration from blueprint:javascript_stripe\nconst stripe = process.env.STRIPE_SECRET_KEY \n  ? new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: \"2025-08-27.basil\" })\n  : null;\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", message: \"Christian App API is running\" });\n  });\n\n  // Stripe payment route for one-time payments - from blueprint:javascript_stripe\n  app.post(\"/api/create-payment-intent\", async (req, res) => {\n    try {\n      if (!stripe) {\n        return res.status(500).json({ \n          message: \"Stripe not configured. Please add STRIPE_SECRET_KEY environment variable.\" \n        });\n      }\n\n      const { amount, productName, productId } = req.body;\n      \n      if (!amount || amount <= 0) {\n        return res.status(400).json({ message: \"Invalid amount\" });\n      }\n\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(amount * 100), // Convert to cents\n        currency: \"brl\", // Brazilian Real for Brazilian Christian store\n        metadata: {\n          productName: productName || \"Produto Cristão\",\n          productId: productId || \"unknown\"\n        },\n        description: `Compra na loja cristã: ${productName || \"Produto\"}`\n      });\n\n      res.json({ \n        clientSecret: paymentIntent.client_secret,\n        paymentIntentId: paymentIntent.id\n      });\n    } catch (error: any) {\n      console.error(\"Stripe payment intent error:\", error);\n      res.status(500).json({ \n        message: \"Erro ao processar pagamento: \" + error.message \n      });\n    }\n  });\n\n  // Get product details for payment\n  app.get(\"/api/products/:id\", (req, res) => {\n    const { id } = req.params;\n    \n    // Mock product data - in real app this would come from database\n    const products = [\n      {\n        id: \"1\",\n        name: \"Pulseira QR Cristã\",\n        description: \"Conecte-se instantaneamente ao verso do dia\",\n        price: 29.90,\n        image: \"https://images.unsplash.com/photo-1515562141207-7a88fb7ce338?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\"\n      },\n      {\n        id: \"2\", \n        name: \"Bíblia de Estudo\",\n        description: \"Tradução ACF com notas\",\n        price: 89.90,\n        image: \"https://images.unsplash.com/photo-1481627834876-b7833e8f5570?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"\n      },\n      {\n        id: \"3\",\n        name: \"Camiseta Fé\", \n        description: \"100% algodão cristão\",\n        price: 39.90,\n        image: \"https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"\n      },\n      {\n        id: \"4\",\n        name: \"Caneca Inspiração\",\n        description: \"Para seus momentos com Deus\", \n        price: 24.90,\n        image: \"https://images.unsplash.com/photo-1514228742587-6b1558fcf93a?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"\n      },\n      {\n        id: \"5\",\n        name: \"Quadro Versículo\",\n        description: \"Decoração cristã\",\n        price: 59.90,\n        image: \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"\n      }\n    ];\n\n    const product = products.find(p => p.id === id);\n    if (!product) {\n      return res.status(404).json({ message: \"Produto não encontrado\" });\n    }\n\n    res.json(product);\n  });\n\n  // In a full implementation, these would be actual API endpoints:\n  // - Daily verse API\n  // - Devotional content API  \n  // - Bible content API\n  // - Hymn database API\n  // - User notes sync API\n  // - Notification scheduling API\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":3863},"server/storage.ts":{"content":"import { type UserProfile, type Note, type BibleVerse, type Devotional } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<UserProfile | undefined>;\n  createUser(user: Omit<UserProfile, 'id'>): Promise<UserProfile>;\n  \n  // Notes methods\n  getNotes(userId: string): Promise<Note[]>;\n  createNote(note: Omit<Note, 'id'>): Promise<Note>;\n  updateNote(id: string, updates: Partial<Note>): Promise<Note | undefined>;\n  deleteNote(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, UserProfile>;\n  private notes: Map<string, Note>;\n\n  constructor() {\n    this.users = new Map();\n    this.notes = new Map();\n  }\n\n  async getUser(id: string): Promise<UserProfile | undefined> {\n    return this.users.get(id);\n  }\n\n  async createUser(userData: Omit<UserProfile, 'id'>): Promise<UserProfile> {\n    const id = randomUUID();\n    const user: UserProfile = { ...userData, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getNotes(userId: string): Promise<Note[]> {\n    return Array.from(this.notes.values()).filter(note => note.id.startsWith(userId));\n  }\n\n  async createNote(noteData: Omit<Note, 'id'>): Promise<Note> {\n    const id = randomUUID();\n    const note: Note = { ...noteData, id };\n    this.notes.set(id, note);\n    return note;\n  }\n\n  async updateNote(id: string, updates: Partial<Note>): Promise<Note | undefined> {\n    const note = this.notes.get(id);\n    if (!note) return undefined;\n    \n    const updatedNote = { ...note, ...updates };\n    this.notes.set(id, updatedNote);\n    return updatedNote;\n  }\n\n  async deleteNote(id: string): Promise<boolean> {\n    return this.notes.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1868},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// User Profile Schema\nexport const userProfileSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1),\n  photo: z.string().optional(),\n  createdAt: z.string(),\n});\n\n// Bible Verse Schema\nexport const bibleVerseSchema = z.object({\n  id: z.string(),\n  book: z.string(),\n  chapter: z.number(),\n  verse: z.number(),\n  text: z.string(),\n  reference: z.string(),\n  category: z.enum(['comfort', 'hope', 'gratitude', 'peace', 'strength']).optional(),\n});\n\n// Devotional Schema\nexport const devotionalSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  content: z.string(),\n  verse: z.string(),\n  verseReference: z.string(),\n  date: z.string(),\n});\n\n// Note Schema\nexport const noteSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  content: z.string(),\n  type: z.enum(['devotional', 'prayer', 'verses', 'reflection']),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\n// Hymn Schema\nexport const hymnSchema = z.object({\n  id: z.string(),\n  number: z.number(),\n  title: z.string(),\n  lyrics: z.array(z.string()),\n  chorus: z.string().optional(),\n});\n\n// Quiz Response Schema\nexport const quizResponseSchema = z.object({\n  id: z.string(),\n  emotion: z.enum(['alegre', 'preocupado', 'triste', 'esperancoso', 'grato']),\n  timestamp: z.string(),\n  responseVerse: z.string(),\n});\n\n// App Settings Schema\nexport const appSettingsSchema = z.object({\n  darkMode: z.boolean(),\n  notificationsEnabled: z.boolean(),\n  morningTime: z.string(),\n  eveningTime: z.string(),\n  fontSize: z.enum(['small', 'medium', 'large']),\n  prayerAlarmEnabled: z.boolean().optional(),\n  morningPrayerEnabled: z.boolean().optional(),\n  eveningPrayerEnabled: z.boolean().optional(),\n  morningPrayerTime: z.string().optional(),\n  eveningPrayerTime: z.string().optional(),\n  prayerAlarmSound: z.string().optional(),\n});\n\nexport type UserProfile = z.infer<typeof userProfileSchema>;\nexport type BibleVerse = z.infer<typeof bibleVerseSchema>;\nexport type Devotional = z.infer<typeof devotionalSchema>;\nexport type Note = z.infer<typeof noteSchema>;\nexport type Hymn = z.infer<typeof hymnSchema>;\nexport type QuizResponse = z.infer<typeof quizResponseSchema>;\nexport type AppSettings = z.infer<typeof appSettingsSchema>;\n","size_bytes":2235},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { AppProvider, useApp } from \"./context/app-context\";\nimport { NotificationProvider } from \"./context/notification-context\";\nimport { BottomNavigation } from \"./components/layout/bottom-navigation\";\nimport { TopBar } from \"./components/layout/top-bar\";\nimport { QuizModal } from \"./components/modals/quiz-modal\";\nimport Home from \"./pages/home\";\nimport Onboarding from \"./pages/onboarding\";\nimport Bible from \"./pages/bible\";\nimport Hymnal from \"./pages/hymnal\";\nimport Notes from \"./pages/notes\";\nimport Store from \"./pages/store\";\nimport Settings from \"./pages/settings\";\nimport Quiz from \"./pages/quiz\";\nimport Calendar from \"./pages/calendar\";\nimport Devotional from \"./pages/devotional\";\nimport Checkout from \"./pages/checkout\";\nimport BackgroundMusic from \"./pages/background-music\";\nimport HymnView from \"./pages/hymn-view\";\n\nfunction AppContent() {\n  const { user } = useApp();\n\n  // Show onboarding if user hasn't completed setup\n  if (!user) {\n    return <Onboarding />;\n  }\n\n  return (\n    <>\n      <TopBar />\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/bible\" component={Bible} />\n        <Route path=\"/hymnal\" component={Hymnal} />\n        <Route path=\"/notes\" component={Notes} />\n        <Route path=\"/store\" component={Store} />\n        <Route path=\"/settings\" component={Settings} />\n        <Route path=\"/calendar\" component={Calendar} />\n        <Route path=\"/devotional\" component={Devotional} />\n        <Route path=\"/checkout\" component={Checkout} />\n        <Route path=\"/background-music\" component={BackgroundMusic} />\n        <Route path=\"/hymn/:number\" component={HymnView} />\n        <Route>\n          <Redirect to=\"/\" />\n        </Route>\n      </Switch>\n      \n      <BottomNavigation />\n      <QuizModal />\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <AppProvider>\n      <NotificationProvider>\n        <AppContent />\n      </NotificationProvider>\n    </AppProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2022},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --radius: 0.75rem;\n  --background: hsl(0, 0%, 98%);\n  --foreground: hsl(210, 10%, 15%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 10%, 15%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 10%, 15%);\n  --primary: hsl(210, 70%, 58%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(45, 85%, 62%);\n  --secondary-foreground: hsl(210, 10%, 15%);\n  --muted: hsl(210, 20%, 96%);\n  --muted-foreground: hsl(210, 10%, 45%);\n  --accent: hsl(45, 85%, 62%);\n  --accent-foreground: hsl(210, 10%, 15%);\n  --destructive: hsl(356, 91%, 54%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 20%, 90%);\n  --input: hsl(210, 20%, 96%);\n  --ring: hsl(210, 70%, 58%);\n}\n\n[data-theme=\"dark\"] {\n  --background: hsl(215, 28%, 10%);\n  --foreground: hsl(210, 20%, 95%);\n  --card: hsl(215, 25%, 12%);\n  --card-foreground: hsl(210, 20%, 95%);\n  --popover: hsl(215, 25%, 12%);\n  --popover-foreground: hsl(210, 20%, 95%);\n  --primary: hsl(210, 70%, 58%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(45, 85%, 62%);\n  --secondary-foreground: hsl(215, 28%, 10%);\n  --muted: hsl(215, 25%, 15%);\n  --muted-foreground: hsl(210, 15%, 65%);\n  --accent: hsl(45, 85%, 62%);\n  --accent-foreground: hsl(215, 28%, 10%);\n  --destructive: hsl(356, 91%, 54%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(215, 25%, 20%);\n  --input: hsl(215, 25%, 15%);\n  --ring: hsl(210, 70%, 58%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n    font-family: 'Inter', system-ui, sans-serif;\n  }\n}\n\n@layer components {\n  .app-container {\n    max-width: 428px;\n    margin: 0 auto;\n    min-height: 100vh;\n    background: var(--background);\n    color: var(--foreground);\n  }\n\n  .gradient-text {\n    background: linear-gradient(135deg, var(--primary), var(--secondary));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .bible-verse {\n    font-family: 'Crimson Text', serif;\n    line-height: 1.8;\n  }\n\n  .devotional-card {\n    background: linear-gradient(135deg, var(--card) 0%, var(--muted) 100%);\n  }\n\n  .hymn-player {\n    background: linear-gradient(135deg, var(--primary), var(--secondary));\n  }\n\n  .quiz-option {\n    transition: all 0.3s ease;\n  }\n\n  .quiz-option:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(0,0,0,0.1);\n  }\n\n  /* Modern card animations */\n  .card-hover {\n    transition: all 0.3s ease;\n  }\n\n  .card-hover:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 30px rgba(0,0,0,0.12);\n  }\n\n  /* Sophisticated shadows */\n  .shadow-sophisticated {\n    box-shadow: 0 4px 20px rgba(0,0,0,0.08);\n  }\n\n  /* Gradient text improvements */\n  .gradient-text-primary {\n    background: linear-gradient(135deg, var(--primary), var(--secondary));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n    font-weight: 600;\n  }\n}\n","size_bytes":3045},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/context/app-context.tsx":{"content":"import React, { createContext, useContext, ReactNode } from \"react\";\nimport { UserProfile, AppSettings, Note } from \"@shared/schema\";\nimport { useLocalStorage } from \"../hooks/use-local-storage\";\n\ninterface AppContextType {\n  user: UserProfile | null;\n  setUser: (user: UserProfile | null) => void;\n  settings: AppSettings;\n  setSettings: (settings: AppSettings) => void;\n  notes: Note[];\n  setNotes: (notes: Note[]) => void;\n  addNote: (note: Omit<Note, 'id' | 'createdAt' | 'updatedAt'>) => void;\n  updateNote: (id: string, updates: Partial<Note>) => void;\n  deleteNote: (id: string) => void;\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\nconst defaultSettings: AppSettings = {\n  darkMode: false,\n  notificationsEnabled: true,\n  morningTime: \"07:00\",\n  eveningTime: \"20:00\",\n  fontSize: \"medium\",\n  prayerAlarmEnabled: false,\n  morningPrayerEnabled: false,\n  eveningPrayerEnabled: false,\n  morningPrayerTime: \"07:00\",\n  eveningPrayerTime: \"19:00\",\n  prayerAlarmSound: \"bell\",\n};\n\nexport function AppProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useLocalStorage<UserProfile | null>(\"user\", null);\n  const [settings, setSettings] = useLocalStorage<AppSettings>(\"settings\", defaultSettings);\n  const [notes, setNotes] = useLocalStorage<Note[]>(\"notes\", []);\n\n  const addNote = (noteData: Omit<Note, 'id' | 'createdAt' | 'updatedAt'>) => {\n    const newNote: Note = {\n      ...noteData,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    setNotes([...notes, newNote]);\n  };\n\n  const updateNote = (id: string, updates: Partial<Note>) => {\n    setNotes(notes.map(note => \n      note.id === id \n        ? { ...note, ...updates, updatedAt: new Date().toISOString() }\n        : note\n    ));\n  };\n\n  const deleteNote = (id: string) => {\n    setNotes(notes.filter(note => note.id !== id));\n  };\n\n  return (\n    <AppContext.Provider value={{\n      user,\n      setUser,\n      settings,\n      setSettings,\n      notes,\n      setNotes,\n      addNote,\n      updateNote,\n      deleteNote,\n    }}>\n      {children}\n    </AppContext.Provider>\n  );\n}\n\nexport function useApp() {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error(\"useApp must be used within an AppProvider\");\n  }\n  return context;\n}\n","size_bytes":2364},"client/src/data/bible-books.ts":{"content":"export const bibleBooks = [\n  // Antigo Testamento\n  { name: \"Gênesis\", chapters: 50 },\n  { name: \"Êxodo\", chapters: 40 },\n  { name: \"Levítico\", chapters: 27 },\n  { name: \"Números\", chapters: 36 },\n  { name: \"Deuteronômio\", chapters: 34 },\n  { name: \"Josué\", chapters: 24 },\n  { name: \"Juízes\", chapters: 21 },\n  { name: \"Rute\", chapters: 4 },\n  { name: \"1 Samuel\", chapters: 31 },\n  { name: \"2 Samuel\", chapters: 24 },\n  { name: \"1 Reis\", chapters: 22 },\n  { name: \"2 Reis\", chapters: 25 },\n  { name: \"1 Crônicas\", chapters: 29 },\n  { name: \"2 Crônicas\", chapters: 36 },\n  { name: \"Esdras\", chapters: 10 },\n  { name: \"Neemias\", chapters: 13 },\n  { name: \"Ester\", chapters: 10 },\n  { name: \"Jó\", chapters: 42 },\n  { name: \"Salmos\", chapters: 150 },\n  { name: \"Provérbios\", chapters: 31 },\n  { name: \"Eclesiastes\", chapters: 12 },\n  { name: \"Cantares\", chapters: 8 },\n  { name: \"Isaías\", chapters: 66 },\n  { name: \"Jeremias\", chapters: 52 },\n  { name: \"Lamentações\", chapters: 5 },\n  { name: \"Ezequiel\", chapters: 48 },\n  { name: \"Daniel\", chapters: 12 },\n  { name: \"Oséias\", chapters: 14 },\n  { name: \"Joel\", chapters: 3 },\n  { name: \"Amós\", chapters: 9 },\n  { name: \"Obadias\", chapters: 1 },\n  { name: \"Jonas\", chapters: 4 },\n  { name: \"Miquéias\", chapters: 7 },\n  { name: \"Naum\", chapters: 3 },\n  { name: \"Habacuque\", chapters: 3 },\n  { name: \"Sofonias\", chapters: 3 },\n  { name: \"Ageu\", chapters: 2 },\n  { name: \"Zacarias\", chapters: 14 },\n  { name: \"Malaquias\", chapters: 4 },\n  \n  // Novo Testamento\n  { name: \"Mateus\", chapters: 28 },\n  { name: \"Marcos\", chapters: 16 },\n  { name: \"Lucas\", chapters: 24 },\n  { name: \"João\", chapters: 21 },\n  { name: \"Atos\", chapters: 28 },\n  { name: \"Romanos\", chapters: 16 },\n  { name: \"1 Coríntios\", chapters: 16 },\n  { name: \"2 Coríntios\", chapters: 13 },\n  { name: \"Gálatas\", chapters: 6 },\n  { name: \"Efésios\", chapters: 6 },\n  { name: \"Filipenses\", chapters: 4 },\n  { name: \"Colossenses\", chapters: 4 },\n  { name: \"1 Tessalonicenses\", chapters: 5 },\n  { name: \"2 Tessalonicenses\", chapters: 3 },\n  { name: \"1 Timóteo\", chapters: 6 },\n  { name: \"2 Timóteo\", chapters: 4 },\n  { name: \"Tito\", chapters: 3 },\n  { name: \"Filemon\", chapters: 1 },\n  { name: \"Hebreus\", chapters: 13 },\n  { name: \"Tiago\", chapters: 5 },\n  { name: \"1 Pedro\", chapters: 5 },\n  { name: \"2 Pedro\", chapters: 3 },\n  { name: \"1 João\", chapters: 5 },\n  { name: \"2 João\", chapters: 1 },\n  { name: \"3 João\", chapters: 1 },\n  { name: \"Judas\", chapters: 1 },\n  { name: \"Apocalipse\", chapters: 22 }\n];\n\nexport const sampleBibleText = {\n  \"João\": {\n    3: [\n      { verse: 16, text: \"Porque Deus amou o mundo de tal maneira que deu o seu Filho unigênito, para que todo aquele que nele crê não pereça, mas tenha a vida eterna.\" },\n      { verse: 17, text: \"Porque Deus enviou o seu Filho ao mundo, não para que condenasse o mundo, mas para que o mundo fosse salvo por ele.\" },\n      { verse: 18, text: \"Quem crê nele não é condenado; mas quem não crê já está condenado, porquanto não crê no nome do unigênito Filho de Deus.\" }\n    ]\n  }\n};\n","size_bytes":3090},"client/src/data/bible-verses.ts":{"content":"import { BibleVerse } from \"@shared/schema\";\n\nexport const dailyVerses: BibleVerse[] = [\n  {\n    id: \"1\",\n    book: \"Jeremias\",\n    chapter: 29,\n    verse: 11,\n    text: \"Porque eu bem sei os pensamentos que tenho a vosso respeito, diz o Senhor; pensamentos de paz, e não de mal, para vos dar o fim que esperais.\",\n    reference: \"Jeremias 29:11\",\n    category: \"hope\"\n  },\n  {\n    id: \"2\",\n    book: \"João\",\n    chapter: 3,\n    verse: 16,\n    text: \"Porque Deus amou o mundo de tal maneira que deu o seu Filho unigênito, para que todo aquele que nele crê não pereça, mas tenha a vida eterna.\",\n    reference: \"João 3:16\",\n    category: \"comfort\"\n  },\n  {\n    id: \"3\",\n    book: \"Filipenses\",\n    chapter: 4,\n    verse: 13,\n    text: \"Posso todas as coisas em Cristo que me fortalece.\",\n    reference: \"Filipenses 4:13\",\n    category: \"strength\"\n  },\n  {\n    id: \"4\",\n    book: \"Salmos\",\n    chapter: 23,\n    verse: 1,\n    text: \"O Senhor é o meu pastor; nada me faltará.\",\n    reference: \"Salmos 23:1\",\n    category: \"peace\"\n  },\n  {\n    id: \"5\",\n    book: \"Provérbios\",\n    chapter: 3,\n    verse: 5,\n    text: \"Confia no Senhor de todo o teu coração, e não te estribes no teu próprio entendimento.\",\n    reference: \"Provérbios 3:5\",\n    category: \"hope\"\n  },\n  {\n    id: \"6\",\n    book: \"Isaías\",\n    chapter: 40,\n    verse: 31,\n    text: \"Mas os que esperam no Senhor renovarão as forças, subirão com asas como águias; correrão, e não se cansarão; caminharão, e não se fatigarão.\",\n    reference: \"Isaías 40:31\",\n    category: \"strength\"\n  },\n  {\n    id: \"7\",\n    book: \"Mateus\",\n    chapter: 11,\n    verse: 28,\n    text: \"Vinde a mim, todos os que estais cansados e oprimidos, e eu vos aliviarei.\",\n    reference: \"Mateus 11:28\",\n    category: \"comfort\"\n  }\n];\n\nexport const emotionalVerses = {\n  alegre: [\n    {\n      id: \"happy1\",\n      text: \"Alegrai-vos sempre no Senhor; outra vez digo, alegrai-vos.\",\n      reference: \"Filipenses 4:4\"\n    },\n    {\n      id: \"happy2\", \n      text: \"Este é o dia que fez o Senhor; regozijemo-nos e alegremo-nos nele.\",\n      reference: \"Salmos 118:24\"\n    }\n  ],\n  preocupado: [\n    {\n      id: \"worried1\",\n      text: \"Não andeis cuidadosos por coisa alguma; antes as vossas petições sejam em tudo conhecidas diante de Deus pela oração e súplicas, com ação de graças.\",\n      reference: \"Filipenses 4:6\"\n    },\n    {\n      id: \"worried2\",\n      text: \"Lançando sobre ele toda a vossa ansiedade, porque ele tem cuidado de vós.\",\n      reference: \"1 Pedro 5:7\"\n    }\n  ],\n  triste: [\n    {\n      id: \"sad1\",\n      text: \"Bem-aventurados os que choram, porque eles serão consolados.\",\n      reference: \"Mateus 5:4\"\n    },\n    {\n      id: \"sad2\",\n      text: \"Perto está o Senhor dos que têm o coração quebrantado, e salva os contritos de espírito.\",\n      reference: \"Salmos 34:18\"\n    }\n  ],\n  esperancoso: [\n    {\n      id: \"hopeful1\",\n      text: \"Ora, a esperança não traz confusão, porquanto o amor de Deus está derramado em nossos corações pelo Espírito Santo que nos foi dado.\",\n      reference: \"Romanos 5:5\"\n    },\n    {\n      id: \"hopeful2\",\n      text: \"Porque eu bem sei os pensamentos que tenho a vosso respeito, diz o Senhor; pensamentos de paz, e não de mal, para vos dar o fim que esperais.\",\n      reference: \"Jeremias 29:11\"\n    }\n  ],\n  grato: [\n    {\n      id: \"grateful1\",\n      text: \"Em tudo dai graças, porque esta é a vontade de Deus em Cristo Jesus para convosco.\",\n      reference: \"1 Tessalonicenses 5:18\"\n    },\n    {\n      id: \"grateful2\",\n      text: \"Oferecerei sacrifícios de louvor, e invocarei o nome do Senhor.\",\n      reference: \"Salmos 116:17\"\n    }\n  ]\n};\n\nexport function getDailyVerse(): BibleVerse {\n  const today = new Date();\n  const dayOfYear = Math.floor((today.getTime() - new Date(today.getFullYear(), 0, 0).getTime()) / 86400000);\n  const index = dayOfYear % dailyVerses.length;\n  return dailyVerses[index];\n}\n\nexport function getVerseForEmotion(emotion: keyof typeof emotionalVerses) {\n  const verses = emotionalVerses[emotion];\n  const randomIndex = Math.floor(Math.random() * verses.length);\n  return verses[randomIndex];\n}\n","size_bytes":4171},"client/src/data/devotionals.ts":{"content":"import { Devotional } from \"@shared/schema\";\n\nexport const dailyDevotionals: Devotional[] = [\n  {\n    id: \"1\",\n    title: \"Planos de Esperança\",\n    content: \"Deus tem planos para você! Mesmo quando não conseguimos ver o caminho à frente, Ele já conhece cada passo da nossa jornada. Os planos de Deus para nós não são de mal, mas de bem. Ele deseja nos dar esperança e um futuro próspero. Hoje, confie que Deus está no controle e que seus planos para você são perfeitos.\",\n    verse: \"Porque eu bem sei os pensamentos que tenho a vosso respeito, diz o Senhor; pensamentos de paz, e não de mal, para vos dar o fim que esperais.\",\n    verseReference: \"Jeremias 29:11\",\n    date: \"2024-01-01\",\n  },\n  {\n    id: \"2\",\n    title: \"Amor Incondicional\",\n    content: \"O amor de Deus por você é tão grande que Ele deu seu próprio Filho para sua salvação. Este amor não depende do que você faz ou deixa de fazer. É um amor puro, incondicional e eterno. Hoje, permita-se experimentar esse amor transformador que pode mudar sua vida completamente.\",\n    verse: \"Porque Deus amou o mundo de tal maneira que deu o seu Filho unigênito, para que todo aquele que nele crê não pereça, mas tenha a vida eterna.\",\n    verseReference: \"João 3:16\",\n    date: \"2024-01-02\",\n  },\n  {\n    id: \"3\",\n    title: \"Força Interior\",\n    content: \"Quando nos sentimos fracos e incapazes, Deus nos lembra que nossa força vem dele. Não precisamos enfrentar os desafios da vida sozinhos. Cristo vive em nós e nos fortalece para cada batalha. Hoje, descanse na certeza de que você pode todas as coisas naquele que te fortalece.\",\n    verse: \"Posso todas as coisas em Cristo que me fortalece.\",\n    verseReference: \"Filipenses 4:13\",\n    date: \"2024-01-03\",\n  }\n];\n\nexport function getTodayDevotional(): Devotional {\n  const today = new Date();\n  const dayOfYear = Math.floor((today.getTime() - new Date(today.getFullYear(), 0, 0).getTime()) / 86400000);\n  const index = dayOfYear % dailyDevotionals.length;\n  return dailyDevotionals[index];\n}\n","size_bytes":2040},"client/src/data/hymns.ts":{"content":"import { Hymn } from \"@shared/schema\";\n\nexport const hymns: Hymn[] = [\n  {\n    id: \"1\",\n    number: 1,\n    title: \"Chuvas de Bênçãos\",\n    lyrics: [\n      \"Gotas da graça, gotas caíram\",\n      \"Já sobre mim, mas as chuvas nada\",\n      \"Do que está por vir, chuvas de bênçãos\",\n      \"Nós esperamos, gotas somente\",\n      \"Agora vemos, chuvas copiosas\",\n      \"Deus prometeu\"\n    ],\n    chorus: \"Chuvas de bênçãos, Chuvas de bênçãos, Deus prometeu! Chuvas de bênçãos, Chuvas de bênçãos, Vamos ter!\"\n  },\n  {\n    id: \"15\",\n    number: 15,\n    title: \"A Voz de Jesus\",\n    lyrics: [\n      \"A voz de Jesus, com doce união,\",\n      \"Proclama a todos: vinde\",\n      \"Achado tenho gozo, paz, perdão\",\n      \"Na graça que nos salva sempre\"\n    ],\n    chorus: \"Oh! Vinde, oh! Vinde A Cristo, o Salvador Achado tenho gozo, paz E eterno amor\"\n  },\n  {\n    id: \"19\",\n    number: 19,\n    title: \"Ceia do Senhor\",\n    lyrics: [\n      \"Jesus, quando estava para ser entregue,\",\n      \"Tomou o pão e deu graças ao Pai\",\n      \"Partiu dizendo: 'Este é meu corpo\",\n      \"Que por vós é dado; fazei isto em memória'\"\n    ],\n    chorus: \"Oh! Santa ceia do Senhor, Sagrado memorial Do grande amor, do grande amor De Cristo, nosso Salvador\"\n  }\n];\n\nexport function searchHymns(query: string): Hymn[] {\n  const lowerQuery = query.toLowerCase();\n  return hymns.filter(hymn => \n    hymn.title.toLowerCase().includes(lowerQuery) ||\n    hymn.number.toString().includes(query) ||\n    hymn.lyrics.some(line => line.toLowerCase().includes(lowerQuery))\n  );\n}\n","size_bytes":1561},"client/src/hooks/use-local-storage.ts":{"content":"import { useState, useEffect } from \"react\";\n\nexport function useLocalStorage<T>(key: string, initialValue: T) {\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      if (typeof window === \"undefined\") {\n        return initialValue;\n      }\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      if (typeof window !== \"undefined\") {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  return [storedValue, setValue] as const;\n}\n","size_bytes":959},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-theme.ts":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocalStorage } from \"./use-local-storage\";\n\nexport function useTheme() {\n  const [isDarkMode, setIsDarkMode] = useLocalStorage(\"darkMode\", false);\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (isDarkMode) {\n      root.setAttribute(\"data-theme\", \"dark\");\n    } else {\n      root.removeAttribute(\"data-theme\");\n    }\n  }, [isDarkMode]);\n\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n  };\n\n  return { isDarkMode, toggleTheme };\n}\n","size_bytes":527},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/bible.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Search, Play, Bookmark, StickyNote, Share2, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { MobileContainer } from \"@/components/ui/mobile-container\";\nimport bibleData from \"@/data/bible.json\";\n\ninterface BibleBook {\n  abbrev: string;\n  chapters: string[][];\n}\n\ninterface BibleData {\n  [key: string]: BibleBook;\n}\n\ninterface BookResult {\n  type: 'book';\n  abbrev: string;\n  name: string;\n  score: number;\n}\n\ninterface VerseResult {\n  type: 'verse';\n  text: string;\n  verse: number;\n  book: string;\n  chapter: number;\n  score: number;\n}\n\ntype SearchResult = BookResult | VerseResult;\n\nconst bibleBookNames: { [key: string]: string } = {\n  \"Gn\": \"Gênesis\", \"Ex\": \"Êxodo\", \"Lv\": \"Levítico\", \"Nm\": \"Números\", \"Dt\": \"Deuteronômio\",\n  \"Js\": \"Josué\", \"Jz\": \"Juízes\", \"Rt\": \"Rute\", \"1Sm\": \"1 Samuel\", \"2Sm\": \"2 Samuel\",\n  \"1Rs\": \"1 Reis\", \"2Rs\": \"2 Reis\", \"1Cr\": \"1 Crônicas\", \"2Cr\": \"2 Crônicas\", \"Ed\": \"Esdras\",\n  \"Ne\": \"Neemias\", \"Et\": \"Ester\", \"Jó\": \"Jó\", \"Sl\": \"Salmos\", \"Pv\": \"Provérbios\",\n  \"Ec\": \"Eclesiastes\", \"Ct\": \"Cânticos\", \"Is\": \"Isaías\", \"Jr\": \"Jeremias\", \"Lm\": \"Lamentações\",\n  \"Ez\": \"Ezequiel\", \"Dn\": \"Daniel\", \"Os\": \"Oséias\", \"Jl\": \"Joel\", \"Am\": \"Amós\",\n  \"Ob\": \"Obadias\", \"Jn\": \"Jonas\", \"Mq\": \"Miquéias\", \"Na\": \"Naum\", \"Hc\": \"Habacuque\",\n  \"Sf\": \"Sofonias\", \"Ag\": \"Ageu\", \"Zc\": \"Zacarias\", \"Ml\": \"Malaquias\",\n  \"Mt\": \"Mateus\", \"Mc\": \"Marcos\", \"Lc\": \"Lucas\", \"Jo\": \"João\", \"At\": \"Atos\",\n  \"Rm\": \"Romanos\", \"1Co\": \"1 Coríntios\", \"2Co\": \"2 Coríntios\", \"Gl\": \"Gálatas\", \"Ef\": \"Efésios\",\n  \"Fp\": \"Filipenses\", \"Cl\": \"Colossenses\", \"1Ts\": \"1 Tessalonicenses\", \"2Ts\": \"2 Tessalonicenses\",\n  \"1Tm\": \"1 Timóteo\", \"2Tm\": \"2 Timóteo\", \"Tt\": \"Tito\", \"Fm\": \"Filemom\", \"Hb\": \"Hebreus\",\n  \"Tg\": \"Tiago\", \"1Pe\": \"1 Pedro\", \"2Pe\": \"2 Pedro\", \"1Jo\": \"1 João\", \"2Jo\": \"2 João\",\n  \"3Jo\": \"3 João\", \"Jd\": \"Judas\", \"Ap\": \"Apocalipse\"\n};\n\nexport default function Bible() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [currentBookAbbrev, setCurrentBookAbbrev] = useState(\"Jo\");\n  const [currentChapter, setCurrentChapter] = useState(3);\n  const [showBookSelector, setShowBookSelector] = useState(false);\n  const [showChapterSelector, setShowChapterSelector] = useState(false);\n  const [bible, setBible] = useState<BibleData>({});\n  const [fontSize, setFontSize] = useState<'normal' | 'large' | 'extra-large'>('normal');\n  const [highlightedVerses, setHighlightedVerses] = useState<{[key: string]: 'yellow' | 'green' | 'blue' | null}>({});\n  const [showHighlightOptions, setShowHighlightOptions] = useState<number | null>(null);\n\n  useEffect(() => {\n    // Convert array format to object format for easier access\n    const bibleObject: BibleData = {};\n    (bibleData as BibleBook[]).forEach(book => {\n      bibleObject[book.abbrev] = book;\n    });\n    setBible(bibleObject);\n  }, []);\n\n  const currentBook = bible[currentBookAbbrev];\n  const currentText = currentBook?.chapters[currentChapter - 1] || [];\n  const currentBookName = bibleBookNames[currentBookAbbrev] || currentBookAbbrev;\n  const maxChapters = currentBook?.chapters.length || 1;\n\n  const nextChapter = () => {\n    if (currentChapter < maxChapters) {\n      setCurrentChapter(currentChapter + 1);\n    }\n  };\n\n  const prevChapter = () => {\n    if (currentChapter > 1) {\n      setCurrentChapter(currentChapter - 1);\n    }\n  };\n\n  const changeBook = (abbrev: string) => {\n    setCurrentBookAbbrev(abbrev);\n    setCurrentChapter(1);\n    setShowBookSelector(false);\n  };\n\n  // Improved search function to find books and verses\n  const searchResults = (): SearchResult[] => {\n    if (!searchQuery.trim()) return [];\n    \n    const query = searchQuery.toLowerCase().trim();\n    const results: SearchResult[] = [];\n    \n    // Search for book names\n    for (const [abbrev, name] of Object.entries(bibleBookNames)) {\n      if (name.toLowerCase().includes(query)) {\n        results.push({\n          type: 'book',\n          abbrev,\n          name,\n          score: name.toLowerCase() === query ? 10 : (name.toLowerCase().startsWith(query) ? 5 : 1)\n        } as BookResult);\n      }\n    }\n    \n    // Search in verses (limit to current book for performance)\n    if (currentText.length > 0) {\n      currentText.forEach((verseText, index) => {\n        if (verseText.toLowerCase().includes(query)) {\n          results.push({\n            type: 'verse',\n            text: verseText,\n            verse: index + 1,\n            book: currentBookName,\n            chapter: currentChapter,\n            score: 1\n          } as VerseResult);\n        }\n      });\n    }\n    \n    return results.sort((a, b) => b.score - a.score).slice(0, 10);\n  };\n\n  const toggleFontSize = () => {\n    setFontSize(current => {\n      switch (current) {\n        case 'normal': return 'large';\n        case 'large': return 'extra-large';\n        case 'extra-large': return 'normal';\n        default: return 'normal';\n      }\n    });\n  };\n\n  const highlightVerse = (verseNumber: number, color: 'yellow' | 'green' | 'blue' | null) => {\n    const verseKey = `${currentBookAbbrev}-${currentChapter}-${verseNumber}`;\n    setHighlightedVerses(prev => ({\n      ...prev,\n      [verseKey]: color\n    }));\n    setShowHighlightOptions(null);\n  };\n\n  const getVerseHighlight = (verseNumber: number) => {\n    const verseKey = `${currentBookAbbrev}-${currentChapter}-${verseNumber}`;\n    return highlightedVerses[verseKey] || null;\n  };\n\n  return (\n    <MobileContainer>\n      <div className=\"p-4 pb-24\">\n        <div className=\"mb-6\">\n          \n          {/* Search Bar */}\n          <div className=\"relative mb-4\">\n            <Input\n              type=\"text\"\n              placeholder=\"Buscar livros ou versículos...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-bible-search\"\n            />\n            <Search className=\"w-4 h-4 absolute left-3 top-3.5 text-muted-foreground\" />\n          </div>\n\n          {/* Search Results */}\n          {searchQuery.trim() && (\n            <Card className=\"mb-4\">\n              <CardContent className=\"p-4\">\n                <h4 className=\"font-semibold mb-3\">Resultados da Busca</h4>\n                <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                  {searchResults().length > 0 ? (\n                    searchResults().map((result, index) => (\n                      <div key={index} className=\"p-2 rounded-lg bg-muted/20 hover:bg-muted/40 cursor-pointer\" \n                           onClick={() => {\n                             if (result.type === 'book') {\n                               changeBook(result.abbrev);\n                               setSearchQuery(\"\");\n                             }\n                           }}>\n                        {result.type === 'book' ? (\n                          <div>\n                            <p className=\"font-medium text-primary\">{result.name}</p>\n                            <p className=\"text-xs text-muted-foreground\">Livro da Bíblia</p>\n                          </div>\n                        ) : (\n                          <div>\n                            <p className=\"text-sm\">{result.text.substring(0, 100)}...</p>\n                            <p className=\"text-xs text-muted-foreground\">{result.book} {result.chapter}:{result.verse}</p>\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-sm text-muted-foreground\">Nenhum resultado encontrado</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Book and Chapter Selection */}\n          <Card className=\"mb-4\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-2 mb-3\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => setShowBookSelector(!showBookSelector)}\n                  data-testid=\"button-change-book\"\n                  className=\"flex-1\"\n                >\n                  <span className=\"text-sm font-medium\">{currentBookName}</span>\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  onClick={() => setShowChapterSelector(!showChapterSelector)}\n                  data-testid=\"button-change-chapter\"\n                  className=\"flex-none px-4\"\n                >\n                  <span className=\"text-sm font-medium\">Cap. {currentChapter}</span>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Book Selector */}\n          {showBookSelector && (\n            <Card className=\"mb-4\">\n              <CardContent className=\"p-4\">\n                <h4 className=\"font-semibold mb-3\">Selecionar Livro</h4>\n                <div className=\"grid grid-cols-2 gap-2 max-h-64 overflow-y-auto\">\n                  {Object.entries(bibleBookNames).map(([abbrev, name]) => (\n                    <Button\n                      key={abbrev}\n                      variant={abbrev === currentBookAbbrev ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => changeBook(abbrev)}\n                      className=\"text-xs\"\n                      data-testid={`button-book-${abbrev}`}\n                    >\n                      {name}\n                    </Button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Chapter Selector */}\n          {showChapterSelector && (\n            <Card className=\"mb-4\">\n              <CardContent className=\"p-4\">\n                <h4 className=\"font-semibold mb-3\">Selecionar Capítulo</h4>\n                <div className=\"grid grid-cols-6 gap-2 max-h-48 overflow-y-auto\">\n                  {Array.from({ length: maxChapters }, (_, i) => i + 1).map(chapter => (\n                    <Button\n                      key={chapter}\n                      variant={chapter === currentChapter ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => {\n                        setCurrentChapter(chapter);\n                        setShowChapterSelector(false);\n                      }}\n                      className=\"text-xs\"\n                      data-testid={`button-chapter-${chapter}`}\n                    >\n                      {chapter}\n                    </Button>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Navigation */}\n          <div className=\"flex items-center justify-between mb-4\">\n            <Button \n              variant=\"outline\" \n              size=\"icon\"\n              onClick={prevChapter}\n              disabled={currentChapter <= 1}\n              data-testid=\"button-prev-chapter\"\n            >\n              <ChevronLeft className=\"w-4 h-4\" />\n            </Button>\n            <span className=\"font-medium\">{currentBookName} {currentChapter}</span>\n            <Button \n              variant=\"outline\" \n              size=\"icon\"\n              onClick={nextChapter}\n              disabled={currentChapter >= maxChapters}\n              data-testid=\"button-next-chapter\"\n            >\n              <ChevronRight className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          {/* Font Size Control */}\n          <div className=\"flex justify-end mb-2\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={toggleFontSize}\n              className=\"text-xs\"\n              data-testid=\"button-font-size\"\n            >\n              Fonte: {fontSize === 'normal' ? 'Normal' : fontSize === 'large' ? 'Grande' : 'Muito Grande'}\n            </Button>\n          </div>\n\n          {/* Bible Text */}\n          <Card>\n            <CardContent className=\"p-6 leading-relaxed\">\n              {currentText.length > 0 ? (\n                currentText.map((verseText, index) => {\n                  const verseNumber = index + 1;\n                  const highlight = getVerseHighlight(verseNumber);\n                  const fontClass = fontSize === 'large' ? 'text-lg' : fontSize === 'extra-large' ? 'text-xl' : 'text-base';\n                  const highlightClass = highlight === 'yellow' ? 'bg-yellow-200 dark:bg-yellow-800' : \n                                       highlight === 'green' ? 'bg-green-200 dark:bg-green-800' :\n                                       highlight === 'blue' ? 'bg-blue-200 dark:bg-blue-800' : '';\n                  \n                  return (\n                    <div key={verseNumber} className=\"relative\">\n                      <p \n                        className={`mb-4 cursor-pointer hover:bg-muted/20 p-2 rounded ${fontClass} ${highlightClass}`} \n                        data-testid={`verse-${verseNumber}`}\n                        onClick={() => setShowHighlightOptions(showHighlightOptions === verseNumber ? null : verseNumber)}\n                      >\n                        <span className=\"text-primary font-semibold mr-2\">{verseNumber}</span>\n                        {verseText}\n                      </p>\n                      \n                      {/* Highlight Options */}\n                      {showHighlightOptions === verseNumber && (\n                        <div className=\"absolute right-2 top-2 bg-background border border-border rounded-lg shadow-lg p-2 z-10\">\n                          <div className=\"flex space-x-1\">\n                            <button\n                              onClick={() => highlightVerse(verseNumber, 'yellow')}\n                              className=\"w-6 h-6 rounded-full bg-yellow-300 hover:bg-yellow-400\"\n                              title=\"Destacar em amarelo\"\n                            />\n                            <button\n                              onClick={() => highlightVerse(verseNumber, 'green')}\n                              className=\"w-6 h-6 rounded-full bg-green-300 hover:bg-green-400\"\n                              title=\"Destacar em verde\"\n                            />\n                            <button\n                              onClick={() => highlightVerse(verseNumber, 'blue')}\n                              className=\"w-6 h-6 rounded-full bg-blue-300 hover:bg-blue-400\"\n                              title=\"Destacar em azul\"\n                            />\n                            <button\n                              onClick={() => highlightVerse(verseNumber, null)}\n                              className=\"w-6 h-6 rounded-full bg-gray-300 hover:bg-gray-400 flex items-center justify-center text-xs\"\n                              title=\"Remover destaque\"\n                            >\n                              ✕\n                            </button>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  );\n                })\n              ) : (\n                <p className=\"text-muted-foreground text-center py-8\">\n                  Carregando capítulo...\n                </p>\n              )}\n\n              {/* Actions */}\n              <div className=\"flex items-center justify-between mt-6 pt-4 border-t border-border\">\n                <div className=\"flex items-center space-x-2\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"icon\"\n                    onClick={prevChapter}\n                    disabled={currentChapter <= 1}\n                    data-testid=\"button-prev-chapter-bottom\"\n                  >\n                    <ChevronLeft className=\"w-4 h-4\" />\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"icon\"\n                    onClick={nextChapter}\n                    disabled={currentChapter >= maxChapters}\n                    data-testid=\"button-next-chapter-bottom\"\n                  >\n                    <ChevronRight className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button variant=\"outline\" size=\"icon\" data-testid=\"button-bookmark\">\n                    <Bookmark className=\"w-4 h-4\" />\n                  </Button>\n                  <Button variant=\"outline\" size=\"icon\" data-testid=\"button-note\">\n                    <StickyNote className=\"w-4 h-4\" />\n                  </Button>\n                  <Button variant=\"outline\" size=\"icon\" data-testid=\"button-share\">\n                    <Share2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                <div className=\"flex items-center\">\n                  <Button variant=\"ghost\" size=\"sm\" className=\"text-xs\" data-testid=\"button-audio-tts\">\n                    <Play className=\"w-3 h-3 mr-1\" />\n                    Áudio\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </MobileContainer>\n  );\n}","size_bytes":17359},"client/src/pages/calendar.tsx":{"content":"import { useState } from \"react\";\nimport { Calendar as CalendarIcon, Plus, Clock, Bell, Target, ChevronLeft, ChevronRight, Edit2, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MobileContainer } from \"@/components/ui/mobile-container\";\nimport { useApp } from \"@/context/app-context\";\n\ninterface CalendarEvent {\n  id: string;\n  title: string;\n  description: string;\n  date: string;\n  time: string;\n  type: 'prayer' | 'reading' | 'devotional' | 'reminder';\n  completed: boolean;\n}\n\nconst mockEvents: CalendarEvent[] = [\n  {\n    id: \"1\",\n    title: \"Oração matinal\",\n    description: \"Momento de gratidão e pedidos\",\n    date: \"2024-12-11\",\n    time: \"07:00\",\n    type: \"prayer\",\n    completed: true\n  },\n  {\n    id: \"2\", \n    title: \"Leitura bíblica\",\n    description: \"Salmos 23\",\n    date: \"2024-12-11\",\n    time: \"19:00\",\n    type: \"reading\",\n    completed: false\n  },\n  {\n    id: \"3\",\n    title: \"Devocional semanal\",\n    description: \"Reflexão sobre fé e esperança\",\n    date: \"2024-12-12\",\n    time: \"20:00\",\n    type: \"devotional\",\n    completed: false\n  }\n];\n\nexport default function Calendar() {\n  const { user } = useApp();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [events, setEvents] = useState<CalendarEvent[]>(mockEvents);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState<string | null>(null);\n  const [editingEvent, setEditingEvent] = useState<CalendarEvent | null>(null);\n  const [newEvent, setNewEvent] = useState({\n    title: \"\",\n    description: \"\",\n    date: new Date().toISOString().split('T')[0],\n    time: \"19:00\",\n    type: \"reminder\" as CalendarEvent['type']\n  });\n\n  const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\n  const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDay();\n  const today = new Date();\n  const isToday = (day: number) => {\n    return currentDate.getFullYear() === today.getFullYear() &&\n           currentDate.getMonth() === today.getMonth() &&\n           day === today.getDate();\n  };\n\n  const getEventsForDay = (day: number) => {\n    const dateStr = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n    return events.filter(event => event.date === dateStr);\n  };\n\n  const getTypeColor = (type: CalendarEvent['type']) => {\n    switch (type) {\n      case 'prayer': return 'bg-primary/20 text-primary-foreground';\n      case 'reading': return 'bg-secondary/20 text-secondary-foreground';\n      case 'devotional': return 'bg-accent/20 text-accent-foreground';\n      default: return 'bg-muted/20 text-muted-foreground';\n    }\n  };\n\n  const getTypeLabel = (type: CalendarEvent['type']) => {\n    switch (type) {\n      case 'prayer': return 'Oração';\n      case 'reading': return 'Leitura';\n      case 'devotional': return 'Devocional';\n      default: return 'Lembrete';\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!newEvent.title.trim()) return;\n\n    if (editingEvent) {\n      // Editing existing event\n      setEvents(events.map(event => \n        event.id === editingEvent.id \n          ? {\n              ...event,\n              title: newEvent.title,\n              description: newEvent.description,\n              date: newEvent.date,\n              time: newEvent.time,\n              type: newEvent.type\n            }\n          : event\n      ));\n      setEditingEvent(null);\n    } else {\n      // Creating new event\n      const event: CalendarEvent = {\n        id: Date.now().toString(),\n        title: newEvent.title,\n        description: newEvent.description,\n        date: newEvent.date,\n        time: newEvent.time,\n        type: newEvent.type,\n        completed: false\n      };\n      setEvents([...events, event]);\n    }\n\n    setNewEvent({\n      title: \"\",\n      description: \"\",\n      date: new Date().toISOString().split('T')[0],\n      time: \"19:00\",\n      type: \"reminder\"\n    });\n    setIsDialogOpen(false);\n  };\n\n  const handleEditEvent = (event: CalendarEvent) => {\n    setEditingEvent(event);\n    setNewEvent({\n      title: event.title,\n      description: event.description,\n      date: event.date,\n      time: event.time,\n      type: event.type\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDeleteEvent = (eventId: string) => {\n    if (confirm('Tem certeza que deseja deletar este evento?')) {\n      setEvents(events.filter(event => event.id !== eventId));\n    }\n  };\n\n  const handleDayClick = (day: number) => {\n    const dateStr = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n    const dayEvents = getEventsForDay(day);\n    if (dayEvents.length > 0) {\n      setSelectedDate(dateStr);\n    }\n  };\n\n  const getMonthEvents = () => {\n    const year = currentDate.getFullYear();\n    const month = currentDate.getMonth();\n    return events.filter(event => {\n      const eventDate = new Date(event.date);\n      return eventDate.getFullYear() === year && eventDate.getMonth() === month;\n    });\n  };\n\n  const toggleEventCompletion = (eventId: string) => {\n    setEvents(events.map(event => \n      event.id === eventId \n        ? { ...event, completed: !event.completed }\n        : event\n    ));\n  };\n\n  const previousMonth = () => {\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() - 1));\n  };\n\n  const nextMonth = () => {\n    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + 1));\n  };\n\n  const monthNames = [\n    \"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\",\n    \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"\n  ];\n\n  const dayNames = [\"Dom\", \"Seg\", \"Ter\", \"Qua\", \"Qui\", \"Sex\", \"Sáb\"];\n\n  const userName = user?.name || \"Amigo\";\n\n  return (\n    <MobileContainer>\n      <div className=\"p-4 pb-24\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold\">Calendário Espiritual</h2>\n            <p className=\"text-muted-foreground\">Organize sua jornada de fé, {userName}</p>\n          </div>\n          \n          <Dialog open={isDialogOpen} onOpenChange={(open) => {\n            setIsDialogOpen(open);\n            if (!open) {\n              setEditingEvent(null);\n              setNewEvent({\n                title: \"\",\n                description: \"\",\n                date: new Date().toISOString().split('T')[0],\n                time: \"19:00\",\n                type: \"reminder\"\n              });\n            }\n          }}>\n            <DialogTrigger asChild>\n              <Button size=\"icon\" data-testid=\"button-create-event\">\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-[95vw] w-full mx-auto\">\n              <DialogHeader>\n                <DialogTitle>{editingEvent ? 'Editar Evento' : 'Novo Lembrete'}</DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\">Título</Label>\n                  <Input\n                    id=\"title\"\n                    value={newEvent.title}\n                    onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}\n                    placeholder=\"Ex: Oração matinal\"\n                    data-testid=\"input-event-title\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"description\">Descrição</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={newEvent.description}\n                    onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}\n                    placeholder=\"Detalhes opcionais\"\n                    rows={3}\n                    data-testid=\"textarea-event-description\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"date\">Data</Label>\n                    <Input\n                      id=\"date\"\n                      type=\"date\"\n                      value={newEvent.date}\n                      onChange={(e) => setNewEvent({ ...newEvent, date: e.target.value })}\n                      data-testid=\"input-event-date\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"time\">Hora</Label>\n                    <Input\n                      id=\"time\"\n                      type=\"time\"\n                      value={newEvent.time}\n                      onChange={(e) => setNewEvent({ ...newEvent, time: e.target.value })}\n                      data-testid=\"input-event-time\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"flex space-x-2 pt-4\">\n                  <Button type=\"submit\" className=\"flex-1\" data-testid=\"button-save-event\">\n                    Salvar\n                  </Button>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsDialogOpen(false)}\n                    data-testid=\"button-cancel-event\"\n                  >\n                    Cancelar\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Calendar Header */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <Button variant=\"ghost\" size=\"icon\" onClick={previousMonth} data-testid=\"button-previous-month\">\n                <ChevronLeft className=\"w-4 h-4\" />\n              </Button>\n              \n              <h3 className=\"text-lg font-semibold\" data-testid=\"text-current-month\">\n                {monthNames[currentDate.getMonth()]} {currentDate.getFullYear()}\n              </h3>\n              \n              <Button variant=\"ghost\" size=\"icon\" onClick={nextMonth} data-testid=\"button-next-month\">\n                <ChevronRight className=\"w-4 h-4\" />\n              </Button>\n            </div>\n\n            {/* Calendar Grid */}\n            <div className=\"grid grid-cols-7 gap-1 mb-2\">\n              {dayNames.map(day => (\n                <div key={day} className=\"text-center text-sm font-medium text-muted-foreground p-2\">\n                  {day}\n                </div>\n              ))}\n            </div>\n\n            <div className=\"grid grid-cols-7 gap-1\">\n              {Array.from({ length: firstDayOfMonth }, (_, i) => (\n                <div key={`empty-${i}`} className=\"p-2\"></div>\n              ))}\n              \n              {Array.from({ length: daysInMonth }, (_, i) => {\n                const day = i + 1;\n                const dayEvents = getEventsForDay(day);\n                const hasEvents = dayEvents.length > 0;\n                const hasCompletedEvents = dayEvents.some(e => e.completed);\n                \n                return (\n                  <div\n                    key={day}\n                    className={`p-2 text-center text-sm cursor-pointer hover:bg-muted rounded ${\n                      isToday(day) ? 'bg-primary text-primary-foreground font-bold' : ''\n                    }`}\n                    onClick={() => handleDayClick(day)}\n                    data-testid={`calendar-day-${day}`}\n                  >\n                    <div>{day}</div>\n                    {hasEvents && (\n                      <div className=\"flex justify-center mt-1\">\n                        <div className={`w-2 h-2 rounded-full ${\n                          hasCompletedEvents ? 'bg-green-500' : 'bg-secondary'\n                        }`} />\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Today's Events */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-lg\">\n              <Clock className=\"w-5 h-5 mr-2 text-primary\" />\n              Eventos de Hoje\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {events.filter(e => e.date === new Date().toISOString().split('T')[0]).length === 0 ? (\n              <p className=\"text-muted-foreground text-center py-4\">\n                Nenhum evento agendado para hoje\n              </p>\n            ) : (\n              <div className=\"space-y-3\">\n                {events\n                  .filter(e => e.date === new Date().toISOString().split('T')[0])\n                  .map(event => (\n                    <div \n                      key={event.id} \n                      className={`flex items-center space-x-3 p-3 rounded-lg border ${\n                        event.completed ? 'bg-muted/50 opacity-75' : 'bg-card'\n                      }`}\n                      data-testid={`event-${event.id}`}\n                    >\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => toggleEventCompletion(event.id)}\n                        className={`w-6 h-6 rounded-full border-2 ${\n                          event.completed \n                            ? 'bg-green-500 border-green-500 text-white' \n                            : 'border-muted-foreground hover:border-primary'\n                        }`}\n                        data-testid={`button-toggle-${event.id}`}\n                      >\n                        {event.completed && <span className=\"text-xs\">✓</span>}\n                      </Button>\n                      \n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <h4 className={`font-medium ${event.completed ? 'line-through' : ''}`}>\n                            {event.title}\n                          </h4>\n                          <Badge className={getTypeColor(event.type)}>\n                            {getTypeLabel(event.type)}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {event.time} • {event.description}\n                        </p>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => handleEditEvent(event)}\n                          className=\"w-8 h-8\"\n                          data-testid={`button-edit-${event.id}`}\n                        >\n                          <Edit2 className=\"w-3 h-3\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => handleDeleteEvent(event.id)}\n                          className=\"w-8 h-8 text-destructive hover:text-destructive\"\n                          data-testid={`button-delete-${event.id}`}\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Events of the Month */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-lg\">\n              <CalendarIcon className=\"w-5 h-5 mr-2 text-primary\" />\n              Eventos do Mês\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {getMonthEvents().length === 0 ? (\n              <p className=\"text-muted-foreground text-center py-4\">\n                Nenhum evento agendado para este mês\n              </p>\n            ) : (\n              <div className=\"space-y-3\">\n                {getMonthEvents().slice(0, 5).map(event => {\n                  const eventDate = new Date(event.date);\n                  const dayOfMonth = eventDate.getDate();\n                  return (\n                    <div \n                      key={event.id} \n                      className={`flex items-center space-x-3 p-3 rounded-lg border ${\n                        event.completed ? 'bg-muted/50 opacity-75' : 'bg-card'\n                      }`}\n                      data-testid={`monthly-event-${event.id}`}\n                    >\n                      <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center\">\n                        <span className=\"text-sm font-bold text-primary\">{dayOfMonth}</span>\n                      </div>\n                      \n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2 mb-1\">\n                          <h4 className={`font-medium ${event.completed ? 'line-through' : ''}`}>\n                            {event.title}\n                          </h4>\n                          <Badge className={getTypeColor(event.type)}>\n                            {getTypeLabel(event.type)}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {event.time} • {event.description}\n                        </p>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => handleEditEvent(event)}\n                          className=\"w-8 h-8\"\n                          data-testid={`button-edit-monthly-${event.id}`}\n                        >\n                          <Edit2 className=\"w-3 h-3\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => handleDeleteEvent(event.id)}\n                          className=\"w-8 h-8 text-destructive hover:text-destructive\"\n                          data-testid={`button-delete-monthly-${event.id}`}\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Spiritual Progress */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-lg\">\n              <Target className=\"w-5 h-5 mr-2 text-primary\" />\n              Progresso Espiritual\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"text-center p-4 bg-primary/5 rounded-lg\">\n                <div className=\"text-2xl font-bold text-primary mb-2\">\n                  Olá, {userName}! 🙏\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-2\">\n                  Você visitou o app hoje!\n                </p>\n                <p className=\"text-sm font-medium text-primary\">\n                  Parabéns por buscar se aproximar mais de Deus! ✨\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"text-xl font-bold text-secondary\">\n                  1\n                </div>\n                <p className=\"text-sm text-muted-foreground\">Dias Consecutivos</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        {/* Day Events Dialog */}\n        <Dialog open={!!selectedDate} onOpenChange={() => setSelectedDate(null)}>\n          <DialogContent className=\"max-w-[95vw] w-full mx-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                Eventos de {selectedDate && new Date(selectedDate + 'T00:00:00').toLocaleDateString('pt-BR')}\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-3\">\n              {selectedDate && getEventsForDay(new Date(selectedDate + 'T00:00:00').getDate()).map(event => (\n                <div \n                  key={event.id} \n                  className={`flex items-center space-x-3 p-3 rounded-lg border ${\n                    event.completed ? 'bg-muted/50 opacity-75' : 'bg-card'\n                  }`}\n                  data-testid={`day-event-${event.id}`}\n                >\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => toggleEventCompletion(event.id)}\n                    className={`w-6 h-6 rounded-full border-2 ${\n                      event.completed \n                        ? 'bg-green-500 border-green-500 text-white' \n                        : 'border-muted-foreground hover:border-primary'\n                    }`}\n                    data-testid={`button-toggle-day-${event.id}`}\n                  >\n                    {event.completed && <span className=\"text-xs\">✓</span>}\n                  </Button>\n                  \n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <h4 className={`font-medium ${event.completed ? 'line-through' : ''}`}>\n                        {event.title}\n                      </h4>\n                      <Badge className={getTypeColor(event.type)}>\n                        {getTypeLabel(event.type)}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {event.time} • {event.description}\n                    </p>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => {\n                        setSelectedDate(null);\n                        handleEditEvent(event);\n                      }}\n                      className=\"w-8 h-8\"\n                      data-testid={`button-edit-day-${event.id}`}\n                    >\n                      <Edit2 className=\"w-3 h-3\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => {\n                        setSelectedDate(null);\n                        handleDeleteEvent(event.id);\n                      }}\n                      className=\"w-8 h-8 text-destructive hover:text-destructive\"\n                      data-testid={`button-delete-day-${event.id}`}\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </MobileContainer>\n  );\n}","size_bytes":23841},"client/src/pages/checkout.tsx":{"content":"// Checkout page for one-time payments - from blueprint:javascript_stripe\nimport { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { ChevronLeft, CreditCard, Shield, Check } from 'lucide-react';\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { MobileContainer } from \"@/components/ui/mobile-container\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Link } from \"wouter\";\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nconst stripePromise = import.meta.env.VITE_STRIPE_PUBLIC_KEY \n  ? loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY)\n  : null;\n\ninterface Product {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  image: string;\n}\n\nconst CheckoutForm = ({ product }: { product: Product }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const { error } = await stripe.confirmPayment({\n        elements,\n        confirmParams: {\n          return_url: `${window.location.origin}/checkout/success?product=${product.id}`,\n        },\n      });\n\n      if (error) {\n        toast({\n          title: \"Falha no Pagamento\",\n          description: error.message || \"Ocorreu um erro ao processar o pagamento\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (err) {\n      toast({\n        title: \"Erro\",\n        description: \"Erro inesperado ao processar pagamento\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(price);\n  };\n\n  return (\n    <MobileContainer>\n      <div className=\"p-4 pb-24\">\n        {/* Header */}\n        <div className=\"flex items-center mb-6\">\n          <Link href=\"/store\">\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back-store\">\n              <ChevronLeft className=\"w-5 h-5\" />\n            </Button>\n          </Link>\n          <h2 className=\"text-xl font-bold ml-4\">Finalizar Compra</h2>\n        </div>\n\n        {/* Product Summary */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-lg\">\n              <CreditCard className=\"w-5 h-5 mr-2 text-primary\" />\n              Resumo do Pedido\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center space-x-4\">\n              <img \n                src={product.image} \n                alt={product.name}\n                className=\"w-16 h-16 rounded-lg object-cover\"\n              />\n              <div className=\"flex-1\">\n                <h4 className=\"font-semibold\">{product.name}</h4>\n                <p className=\"text-sm text-muted-foreground\">{product.description}</p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-lg font-bold text-primary\">\n                  {formatPrice(product.price)}\n                </p>\n              </div>\n            </div>\n            \n            <Separator className=\"my-4\" />\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>Subtotal</span>\n                <span>{formatPrice(product.price)}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span>Frete</span>\n                <span className=\"text-green-600\">Grátis</span>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between font-semibold\">\n                <span>Total</span>\n                <span className=\"text-primary\">{formatPrice(product.price)}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Payment Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-lg\">\n              <Shield className=\"w-5 h-5 mr-2 text-primary\" />\n              Pagamento Seguro\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"p-4 border rounded-lg\">\n                <PaymentElement \n                  options={{\n                    layout: \"tabs\"\n                  }}\n                />\n              </div>\n              \n              <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                <Shield className=\"w-4 h-4 text-green-600\" />\n                <span>Pagamento processado com segurança pela Stripe</span>\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full p-4 text-lg font-semibold\"\n                disabled={!stripe || !elements || isProcessing}\n                data-testid=\"button-complete-payment\"\n              >\n                {isProcessing ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                    Processando...\n                  </div>\n                ) : (\n                  <>\n                    <CreditCard className=\"w-5 h-5 mr-2\" />\n                    Pagar {formatPrice(product.price)}\n                  </>\n                )}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 space-y-3 text-xs text-muted-foreground\">\n              <div className=\"flex items-center space-x-2\">\n                <Check className=\"w-4 h-4 text-green-600\" />\n                <span>Transação 100% segura e criptografada</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Check className=\"w-4 h-4 text-green-600\" />\n                <span>Dados do cartão protegidos pela Stripe</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Check className=\"w-4 h-4 text-green-600\" />\n                <span>Suporte via WhatsApp em caso de dúvidas</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </MobileContainer>\n  );\n};\n\nexport default function Checkout() {\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [product, setProduct] = useState<Product | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const { toast } = useToast();\n\n  useEffect(() => {\n    // Get product ID from URL params\n    const urlParams = new URLSearchParams(window.location.search);\n    const productId = urlParams.get('product');\n    \n    if (!productId) {\n      setError(\"Produto não especificado\");\n      setIsLoading(false);\n      return;\n    }\n\n    if (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n      setError(\"Stripe não configurado. Pagamentos temporariamente indisponíveis.\");\n      setIsLoading(false);\n      return;\n    }\n\n    // Fetch product details and create payment intent\n    const initializePayment = async () => {\n      try {\n        // Get product details\n        const productResponse = await apiRequest(\"GET\", `/api/products/${productId}`);\n        if (!productResponse.ok) {\n          throw new Error(\"Produto não encontrado\");\n        }\n        const productData = await productResponse.json();\n        setProduct(productData);\n\n        // Create payment intent\n        const paymentResponse = await apiRequest(\"POST\", \"/api/create-payment-intent\", { \n          amount: productData.price,\n          productName: productData.name,\n          productId: productData.id\n        });\n        \n        if (!paymentResponse.ok) {\n          const errorData = await paymentResponse.json();\n          throw new Error(errorData.message || \"Erro ao processar pagamento\");\n        }\n        \n        const paymentData = await paymentResponse.json();\n        setClientSecret(paymentData.clientSecret);\n      } catch (err: any) {\n        console.error(\"Checkout initialization error:\", err);\n        setError(err.message || \"Erro ao carregar checkout\");\n        toast({\n          title: \"Erro\",\n          description: err.message || \"Não foi possível carregar o checkout\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializePayment();\n  }, [toast]);\n\n  if (isLoading) {\n    return (\n      <MobileContainer>\n        <div className=\"min-h-screen flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n            <p className=\"text-muted-foreground\">Carregando checkout...</p>\n          </div>\n        </div>\n      </MobileContainer>\n    );\n  }\n\n  if (error || !product || !clientSecret || !stripePromise) {\n    return (\n      <MobileContainer>\n        <div className=\"min-h-screen flex items-center justify-center p-4\">\n          <Card className=\"w-full max-w-md\">\n            <CardContent className=\"p-6 text-center\">\n              <h3 className=\"text-lg font-semibold mb-2\">Erro no Checkout</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                {error || \"Não foi possível carregar a página de pagamento\"}\n              </p>\n              <Link href=\"/store\">\n                <Button data-testid=\"button-back-to-store\">\n                  Voltar à Loja\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </MobileContainer>\n    );\n  }\n\n  // Make SURE to wrap the form in <Elements> which provides the stripe context.\n  return (\n    <Elements stripe={stripePromise} options={{ clientSecret }}>\n      <CheckoutForm product={product} />\n    </Elements>\n  );\n}","size_bytes":10529},"client/src/pages/devotional.tsx":{"content":"import { useState } from \"react\";\nimport { ChevronLeft, ChevronRight, Heart, Share2, Bookmark, Calendar as CalendarIcon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { MobileContainer } from \"@/components/ui/mobile-container\";\nimport { getTodayDevotional, dailyDevotionals } from \"@/data/devotionals\";\nimport { useApp } from \"@/context/app-context\";\nimport { Link } from \"wouter\";\n\nexport default function Devotional() {\n  const { user } = useApp();\n  const [currentIndex, setCurrentIndex] = useState(() => {\n    // Start with today's devotional\n    const today = new Date();\n    const dayOfYear = Math.floor((today.getTime() - new Date(today.getFullYear(), 0, 0).getTime()) / 86400000);\n    return dayOfYear % dailyDevotionals.length;\n  });\n\n  const currentDevotional = dailyDevotionals[currentIndex];\n  const userName = user?.name || \"Amigo\";\n\n  const nextDevotional = () => {\n    setCurrentIndex((prev) => (prev + 1) % dailyDevotionals.length);\n  };\n\n  const previousDevotional = () => {\n    setCurrentIndex((prev) => (prev - 1 + dailyDevotionals.length) % dailyDevotionals.length);\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const today = new Date();\n    \n    if (date.toDateString() === today.toDateString()) {\n      return \"Hoje\";\n    } else {\n      return date.toLocaleDateString('pt-BR', {\n        day: 'numeric',\n        month: 'long',\n        year: 'numeric'\n      });\n    }\n  };\n\n  const isToday = currentIndex === Math.floor((new Date().getTime() - new Date(new Date().getFullYear(), 0, 0).getTime()) / 86400000) % dailyDevotionals.length;\n\n  return (\n    <MobileContainer>\n      <div className=\"p-4 pb-24\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-back-home\">\n              <ChevronLeft className=\"w-5 h-5\" />\n            </Button>\n          </Link>\n          \n          <div className=\"text-center\">\n            <h2 className=\"text-xl font-bold\">Devocional</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              {isToday ? \"Hoje\" : `${currentIndex + 1} de ${dailyDevotionals.length}`}\n            </p>\n          </div>\n\n          <div className=\"flex space-x-1\">\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-bookmark\">\n              <Bookmark className=\"w-5 h-5\" />\n            </Button>\n            <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-share\">\n              <Share2 className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Devotional Card */}\n        <Card className=\"devotional-card mb-6 shadow-lg\">\n          <CardContent className=\"p-6\">\n            {/* Date and greeting */}\n            <div className=\"text-center mb-6\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <CalendarIcon className=\"w-5 h-5 text-primary mr-2\" />\n                <span className=\"text-sm font-medium text-primary\">\n                  {new Date().toLocaleDateString('pt-BR', {\n                    day: 'numeric',\n                    month: 'long',\n                    year: 'numeric'\n                  })}\n                </span>\n              </div>\n              <h1 className=\"text-2xl font-bold mb-2\" data-testid=\"text-devotional-title\">\n                {currentDevotional.title}\n              </h1>\n              <p className=\"text-muted-foreground\">\n                De: Deus, Para: {userName}\n              </p>\n            </div>\n\n            {/* Bible Verse */}\n            <Card className=\"mb-6 bg-primary/5 border-primary/20\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center mb-3\">\n                  <Heart className=\"w-5 h-5 text-primary mr-2\" />\n                  <span className=\"text-sm font-medium text-primary\">Versículo base</span>\n                </div>\n                <p className=\"bible-verse text-lg mb-3 font-medium\" data-testid=\"text-devotional-verse\">\n                  \"{currentDevotional.verse}\"\n                </p>\n                <p className=\"text-sm text-muted-foreground text-right\" data-testid=\"text-devotional-reference\">\n                  {currentDevotional.verseReference}\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Devotional Content */}\n            <div className=\"space-y-4\">\n              <div className=\"prose prose-sm max-w-none dark:prose-invert\">\n                <p className=\"text-base leading-relaxed\" data-testid=\"text-devotional-content\">\n                  {currentDevotional.content}\n                </p>\n              </div>\n            </div>\n\n            {/* Navigation Buttons */}\n            <div className=\"flex items-center justify-between mt-6 mb-4\">\n              <Button \n                variant=\"outline\" \n                onClick={previousDevotional}\n                className=\"flex items-center justify-center\"\n                size=\"icon\"\n                data-testid=\"button-previous-devotional\"\n              >\n                <ChevronLeft className=\"w-4 h-4\" />\n              </Button>\n\n              <div className=\"flex space-x-1\">\n                {dailyDevotionals.map((_, index) => (\n                  <button\n                    key={index}\n                    onClick={() => setCurrentIndex(index)}\n                    className={`w-2 h-2 rounded-full transition-colors ${\n                      index === currentIndex \n                        ? 'bg-primary' \n                        : 'bg-muted hover:bg-muted-foreground'\n                    }`}\n                    data-testid={`dot-${index}`}\n                  />\n                ))}\n              </div>\n\n              <Button \n                variant=\"outline\" \n                onClick={nextDevotional}\n                className=\"flex items-center justify-center\"\n                size=\"icon\"\n                data-testid=\"button-next-devotional\"\n              >\n                <ChevronRight className=\"w-4 h-4\" />\n              </Button>\n            </div>\n\n            {/* Reflection Questions */}\n            <Card className=\"mt-6 bg-secondary/5 border-secondary/20\">\n              <CardContent className=\"p-4\">\n                <h4 className=\"font-semibold mb-3 text-secondary\">Para Reflexão:</h4>\n                <ul className=\"space-y-2 text-sm\">\n                  <li>• Como posso aplicar esta mensagem em minha vida hoje?</li>\n                  <li>• Que aspecto desta reflexão mais tocou meu coração?</li>\n                  <li>• Como posso compartilhar esta verdade com outros?</li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            {/* Prayer Suggestion */}\n            <Card className=\"mt-4 bg-accent/5 border-accent/20\">\n              <CardContent className=\"p-4\">\n                <h4 className=\"font-semibold mb-2 text-accent\">Oração:</h4>\n                <p className=\"text-sm italic\">\n                  \"Senhor, obrigado por esta palavra que chegou ao meu coração hoje. \n                  Ajuda-me a viver de acordo com sua vontade e a ser uma bênção para outros. \n                  Em nome de Jesus, amém.\"\n                </p>\n              </CardContent>\n            </Card>\n          </CardContent>\n        </Card>\n\n\n        {/* Call to Action */}\n        <Card className=\"mt-6\">\n          <CardContent className=\"p-4 text-center\">\n            <p className=\"text-sm text-muted-foreground mb-3\">\n              Gostou deste devocional? Compartilhe a bênção!\n            </p>\n            <div className=\"flex space-x-2 justify-center\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-share-whatsapp\">\n                Compartilhar\n              </Button>\n              <Link href=\"/notes\">\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-make-note\">\n                  Fazer Anotação\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </MobileContainer>\n  );\n}","size_bytes":8180},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { Heart, BookOpen, Music, StickyNote, Calendar, Store, Share2, Instagram, Youtube } from \"lucide-react\";\nimport { SiTiktok } from \"react-icons/si\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { MobileContainer } from \"@/components/ui/mobile-container\";\nimport { useApp } from \"@/context/app-context\";\nimport { getDailyVerse } from \"@/data/bible-verses\";\nimport { getTodayDevotional as getDevotional } from \"@/data/devotionals\";\n\nexport default function Home() {\n  const { user } = useApp();\n  const dailyVerse = getDailyVerse();\n  const todayDevotional = getDevotional();\n\n  const getGreeting = () => {\n    const hour = new Date().getHours();\n    if (hour < 12) return \"Bom dia\";\n    if (hour < 18) return \"Boa tarde\";\n    return \"Boa noite\";\n  };\n\n  const userName = user?.name || \"Amigo\";\n\n  return (\n    <MobileContainer>\n      <div className=\"p-4 pb-24\">\n        {/* Header */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h2 className=\"text-2xl font-semibold\" data-testid=\"text-greeting\">\n                {getGreeting()}, {userName}\n              </h2>\n              <p className=\"text-muted-foreground\">Que Deus abençoe seu dia</p>\n            </div>\n            <div className=\"w-12 h-12 rounded-full bg-primary flex items-center justify-center\">\n              {user?.photo ? (\n                <img src={user.photo} alt=\"Profile\" className=\"w-12 h-12 rounded-full object-cover\" />\n              ) : (\n                <span className=\"text-primary-foreground font-semibold\">\n                  {userName.charAt(0).toUpperCase()}\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Daily Verse */}\n        <Card className=\"mb-6 shadow-sm\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center mb-3\">\n              <Heart className=\"w-5 h-5 text-secondary mr-2\" />\n              <h3 className=\"font-semibold\">Verso do Dia</h3>\n            </div>\n            <p className=\"bible-verse text-lg mb-3\" data-testid=\"text-daily-verse\">\n              \"{dailyVerse.text}\"\n            </p>\n            <p className=\"text-sm text-muted-foreground mb-3\" data-testid=\"text-verse-reference\">\n              {dailyVerse.reference}\n            </p>\n            <Button variant=\"ghost\" size=\"sm\" className=\"p-0 h-auto text-primary\" data-testid=\"button-share-verse\">\n              <Share2 className=\"w-4 h-4 mr-2\" />\n              Compartilhar\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Daily Devotional */}\n        <Card className=\"devotional-card mb-6 shadow-sm\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"font-semibold mb-3 flex items-center\">\n              <BookOpen className=\"w-5 h-5 text-primary mr-2\" />\n              Devocional do Dia\n            </h3>\n            <p className=\"text-sm text-muted-foreground mb-3\" data-testid=\"text-devotional-preview\">\n              {todayDevotional.content.substring(0, 100)}...\n            </p>\n            <Link href=\"/devotional\" className=\"text-primary text-sm font-medium\" data-testid=\"link-full-devotional\">\n              Ler completo →\n            </Link>\n          </CardContent>\n        </Card>\n\n        {/* Main Actions Grid */}\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          <Link href=\"/bible\">\n            <Card className=\"card-hover cursor-pointer shadow-sophisticated\" data-testid=\"card-bible\">\n              <CardContent className=\"p-6 text-center\">\n                <BookOpen className=\"w-8 h-8 text-primary mb-3 mx-auto\" />\n                <h4 className=\"font-semibold\">Bíblia</h4>\n                <p className=\"text-xs text-muted-foreground\">Palavra de Deus</p>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/hymnal\">\n            <Card className=\"card-hover cursor-pointer shadow-sophisticated\" data-testid=\"card-hymnal\">\n              <CardContent className=\"p-6 text-center\">\n                <Music className=\"w-8 h-8 text-secondary mb-3 mx-auto\" />\n                <h4 className=\"font-semibold\">Hinário</h4>\n                <p className=\"text-xs text-muted-foreground\">Harpa Cristã</p>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/notes\">\n            <Card className=\"card-hover cursor-pointer shadow-sophisticated\" data-testid=\"card-notes\">\n              <CardContent className=\"p-6 text-center\">\n                <StickyNote className=\"w-8 h-8 text-accent mb-3 mx-auto\" />\n                <h4 className=\"font-semibold\">Anotações</h4>\n                <p className=\"text-xs text-muted-foreground\">Suas reflexões</p>\n              </CardContent>\n            </Card>\n          </Link>\n\n          <Link href=\"/calendar\">\n            <Card className=\"card-hover cursor-pointer shadow-sophisticated\" data-testid=\"card-calendar\">\n              <CardContent className=\"p-6 text-center\">\n                <Calendar className=\"w-8 h-8 text-primary mb-3 mx-auto\" />\n                <h4 className=\"font-semibold\">Calendário</h4>\n                <p className=\"text-xs text-muted-foreground\">Lembretes</p>\n              </CardContent>\n            </Card>\n          </Link>\n        </div>\n\n        {/* Store Section */}\n        <Card className=\"mb-8 shadow-sm bg-gradient-to-r from-secondary/10 to-primary/10 border-primary/20\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-16 h-16 rounded-lg bg-gradient-to-r from-primary to-secondary flex items-center justify-center\">\n                <Store className=\"w-8 h-8 text-white\" />\n              </div>\n              <div className=\"flex-1\">\n                <h4 className=\"font-semibold\">Loja Verso & Paz</h4>\n                <p className=\"text-sm text-muted-foreground\">Produtos especiais que fortalecem sua fé</p>\n                <Link href=\"/store\">\n                  <Button variant=\"ghost\" size=\"sm\" className=\"p-0 h-auto text-primary mt-1 font-medium\" data-testid=\"link-store\">\n                    Explorar agora →\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Social Media */}\n        <Card className=\"shadow-sm\">\n          <CardContent className=\"p-4\">\n            <h4 className=\"font-semibold mb-3\">Conecte-se conosco</h4>\n            <div className=\"grid grid-cols-3 gap-2\">\n              <a \n                href=\"#\" \n                className=\"flex flex-col items-center space-y-1 p-3 rounded-lg hover:bg-muted transition-colors\"\n                data-testid=\"link-instagram\"\n              >\n                <Instagram className=\"w-6 h-6 text-pink-500\" />\n                <span className=\"text-xs font-medium\">Instagram</span>\n              </a>\n              <a \n                href=\"#\" \n                className=\"flex flex-col items-center space-y-1 p-3 rounded-lg hover:bg-muted transition-colors\"\n                data-testid=\"link-youtube\"\n              >\n                <Youtube className=\"w-6 h-6 text-red-500\" />\n                <span className=\"text-xs font-medium\">YouTube</span>\n              </a>\n              <a \n                href=\"#\" \n                className=\"flex flex-col items-center space-y-1 p-3 rounded-lg hover:bg-muted transition-colors\"\n                data-testid=\"link-tiktok\"\n              >\n                <SiTiktok className=\"w-6 h-6 text-black dark:text-white\" />\n                <span className=\"text-xs font-medium\">TikTok</span>\n              </a>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </MobileContainer>\n  );\n}\n","size_bytes":7862},"client/src/pages/hymnal.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Play, Pause, Volume2, Heart, Clock, Hash, List, Music } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { MobileContainer } from \"@/components/ui/mobile-container\";\nimport { hymns, searchHymns } from \"@/data/hymns\";\n\nexport default function Hymnal() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [favorites, setFavorites] = useState<number[]>([1, 30, 45]);\n  const [recentHymns, setRecentHymns] = useState<number[]>([5, 12, 25]);\n  const [showAllHymns, setShowAllHymns] = useState(false);\n  const [, setLocation] = useLocation();\n\n  const filteredHymns = searchQuery ? searchHymns(searchQuery) : hymns;\n  const favoriteHymns = hymns.filter(h => favorites.includes(h.number));\n  const recentHymnsList = hymns.filter(h => recentHymns.includes(h.number));\n\n  const selectHymn = (hymn: typeof hymns[0]) => {\n    // Add to recent if not already there\n    if (!recentHymns.includes(hymn.number)) {\n      setRecentHymns([hymn.number, ...recentHymns.slice(0, 4)]);\n    }\n    // Navigate to individual hymn page\n    setLocation(`/hymn/${hymn.number}`);\n  };\n\n  const toggleFavorite = (hymnNumber: number) => {\n    if (favorites.includes(hymnNumber)) {\n      setFavorites(favorites.filter(n => n !== hymnNumber));\n    } else {\n      setFavorites([hymnNumber, ...favorites]);\n    }\n  };\n\n  const backgroundMusicList = [\n    { id: 1, title: \"Paz do Senhor\", duration: \"4:32\" },\n    { id: 2, title: \"Suave Oração\", duration: \"3:45\" },\n    { id: 3, title: \"Comunhão com Deus\", duration: \"5:12\" },\n    { id: 4, title: \"Serenidade\", duration: \"4:18\" },\n    { id: 5, title: \"Reflexão Divina\", duration: \"3:58\" }\n  ];\n\n  return (\n    <MobileContainer>\n      <div className=\"p-4 pb-24\">\n        <div className=\"mb-6\">\n          \n          {/* Background Music Section */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h5 className=\"font-medium\">Música de Fundo</h5>\n                  <p className=\"text-sm text-muted-foreground\">Meditação e Oração</p>\n                </div>\n                <Button\n                  onClick={() => setLocation('/background-music')}\n                  className=\"flex items-center space-x-2\"\n                  data-testid=\"button-background-music\"\n                >\n                  <Music className=\"w-4 h-4\" />\n                  <span>Entrar</span>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Search Input and View List Button */}\n          <div className=\"flex items-center space-x-2 mb-4\">\n            <div className=\"relative flex-1\">\n              <Input\n                type=\"text\"\n                placeholder=\"Buscar hino...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 max-w-xs\"\n                data-testid=\"input-hymn-search\"\n              />\n              <Search className=\"w-4 h-4 absolute left-3 top-3.5 text-muted-foreground\" />\n            </div>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowAllHymns(true)}\n              className=\"flex items-center space-x-2\"\n              data-testid=\"button-view-all-hymns\"\n            >\n              <List className=\"w-4 h-4\" />\n              <span>Ver Lista</span>\n            </Button>\n          </div>\n\n        </div>\n\n        {/* Hymn Lists with Tabs */}\n        <Tabs defaultValue=\"recent\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"recent\">Recentes</TabsTrigger>\n            <TabsTrigger value=\"all\">Todos</TabsTrigger>\n            <TabsTrigger value=\"favorites\">Favoritos</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"all\" className=\"mt-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-semibold mb-3\">\n                {searchQuery ? `Resultados para \"${searchQuery}\"` : \"Lista de Hinos\"}\n              </h4>\n              \n              {filteredHymns.map((hymn) => (\n                <Card \n                  key={hymn.id}\n                  className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                  onClick={() => selectHymn(hymn)}\n                  data-testid={`card-hymn-${hymn.number}`}\n                >\n                  <CardContent className=\"flex items-center p-3\">\n                    <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center mr-3\">\n                      <span className=\"text-sm font-bold text-primary\">\n                        {hymn.number.toString().padStart(3, '0')}\n                      </span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h5 className=\"font-medium\">{hymn.title}</h5>\n                      <p className=\"text-sm text-muted-foreground\">{hymn.title}</p>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        toggleFavorite(hymn.number);\n                      }}\n                      data-testid={`button-favorite-${hymn.number}`}\n                    >\n                      <Heart className={`w-4 h-4 ${favorites.includes(hymn.number) ? 'fill-current text-red-500' : 'text-muted-foreground'}`} />\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"favorites\" className=\"mt-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-semibold mb-3 flex items-center\">\n                <Heart className=\"w-5 h-5 text-red-500 mr-2\" />\n                Hinos Favoritos\n              </h4>\n              \n              {favoriteHymns.length === 0 ? (\n                <p className=\"text-muted-foreground text-center py-8\">\n                  Nenhum hino favoritado ainda.\n                </p>\n              ) : (\n                favoriteHymns.map((hymn) => (\n                  <Card \n                    key={hymn.id}\n                    className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                    onClick={() => selectHymn(hymn)}\n                    data-testid={`card-favorite-hymn-${hymn.number}`}\n                  >\n                    <CardContent className=\"flex items-center p-3\">\n                      <div className=\"w-10 h-10 rounded-full bg-red-100 flex items-center justify-center mr-3\">\n                        <span className=\"text-sm font-bold text-red-600\">\n                          {hymn.number.toString().padStart(3, '0')}\n                        </span>\n                      </div>\n                      <div className=\"flex-1\">\n                        <h5 className=\"font-medium\">{hymn.title}</h5>\n                        <p className=\"text-sm text-muted-foreground\">{hymn.title}</p>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"text-primary\"\n                        data-testid={`button-play-favorite-${hymn.number}`}\n                      >\n                        <Play className=\"w-4 h-4\" />\n                      </Button>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"recent\" className=\"mt-4\">\n            <div className=\"space-y-2\">\n              <h4 className=\"font-semibold mb-3 flex items-center\">\n                <Clock className=\"w-5 h-5 text-blue-500 mr-2\" />\n                Hinos Recentes\n              </h4>\n              \n              {recentHymnsList.length === 0 ? (\n                <p className=\"text-muted-foreground text-center py-8\">\n                  Nenhum hino reproduzido recentemente.\n                </p>\n              ) : (\n                recentHymnsList.map((hymn) => (\n                  <Card \n                    key={hymn.id}\n                    className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                    onClick={() => selectHymn(hymn)}\n                    data-testid={`card-recent-hymn-${hymn.number}`}\n                  >\n                    <CardContent className=\"flex items-center p-3\">\n                      <div className=\"w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center mr-3\">\n                        <span className=\"text-sm font-bold text-blue-600\">\n                          {hymn.number.toString().padStart(3, '0')}\n                        </span>\n                      </div>\n                      <div className=\"flex-1\">\n                        <h5 className=\"font-medium\">{hymn.title}</h5>\n                        <p className=\"text-sm text-muted-foreground\">{hymn.title}</p>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"text-primary\"\n                        data-testid={`button-play-recent-${hymn.number}`}\n                      >\n                        <Play className=\"w-4 h-4\" />\n                      </Button>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n        \n        {/* All Hymns Dialog */}\n        <Dialog open={showAllHymns} onOpenChange={setShowAllHymns}>\n          <DialogContent className=\"max-w-[95vw] w-full mx-auto max-h-[90vh] overflow-auto\">\n            <DialogHeader>\n              <DialogTitle>Lista Completa - 640 Hinos da Harpa Cristã</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-2 max-h-[70vh] overflow-auto\">\n              {hymns.map((hymn) => (\n                <Card \n                  key={hymn.id}\n                  className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                  onClick={() => {\n                    setShowAllHymns(false);\n                    selectHymn(hymn);\n                  }}\n                  data-testid={`card-all-hymn-${hymn.number}`}\n                >\n                  <CardContent className=\"flex items-center p-3\">\n                    <div className=\"w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center mr-3\">\n                      <span className=\"text-sm font-bold text-primary\">\n                        {hymn.number}\n                      </span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h5 className=\"font-medium\">{hymn.title}</h5>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        toggleFavorite(hymn.number);\n                      }}\n                      data-testid={`button-favorite-all-${hymn.number}`}\n                    >\n                      <Heart className={`w-4 h-4 ${favorites.includes(hymn.number) ? 'fill-current text-red-500' : 'text-muted-foreground'}`} />\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </MobileContainer>\n  );\n}\n","size_bytes":11938},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/notes.tsx":{"content":"import { useState } from \"react\";\nimport { Plus, Search, Edit, Share2, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MobileContainer } from \"@/components/ui/mobile-container\";\nimport { useApp } from \"@/context/app-context\";\nimport { Note } from \"@shared/schema\";\n\nexport default function Notes() {\n  const { notes, addNote, updateNote, deleteNote } = useApp();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingNote, setEditingNote] = useState<Note | null>(null);\n  const [newNote, setNewNote] = useState({\n    title: \"\",\n    content: \"\",\n    type: \"reflection\" as Note['type'],\n  });\n\n  const filteredNotes = notes.filter(note => \n    note.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    note.content.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!newNote.title.trim() || !newNote.content.trim()) {\n      return;\n    }\n\n    if (editingNote) {\n      updateNote(editingNote.id, {\n        title: newNote.title,\n        content: newNote.content,\n        type: newNote.type,\n      });\n    } else {\n      addNote(newNote);\n    }\n\n    setNewNote({ title: \"\", content: \"\", type: \"reflection\" });\n    setEditingNote(null);\n    setIsDialogOpen(false);\n  };\n\n  const handleEdit = (note: Note) => {\n    setEditingNote(note);\n    setNewNote({\n      title: note.title,\n      content: note.content,\n      type: note.type,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (noteId: string) => {\n    if (confirm(\"Tem certeza que deseja excluir esta anotação?\")) {\n      deleteNote(noteId);\n    }\n  };\n\n  const getTypeColor = (type: Note['type']) => {\n    switch (type) {\n      case 'devotional': return 'bg-secondary/20 text-secondary-foreground';\n      case 'prayer': return 'bg-primary/20 text-primary-foreground';\n      case 'verses': return 'bg-accent/20 text-accent-foreground';\n      default: return 'bg-muted/20 text-muted-foreground';\n    }\n  };\n\n  const getTypeLabel = (type: Note['type']) => {\n    switch (type) {\n      case 'devotional': return 'Devocional';\n      case 'prayer': return 'Oração';\n      case 'verses': return 'Versículos';\n      default: return 'Reflexão';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    if (date.toDateString() === today.toDateString()) {\n      return 'Hoje';\n    } else if (date.toDateString() === yesterday.toDateString()) {\n      return 'Ontem';\n    } else {\n      const diffTime = Math.abs(today.getTime() - date.getTime());\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      return `${diffDays} dias atrás`;\n    }\n  };\n\n  return (\n    <MobileContainer>\n      <div className=\"p-4 pb-24\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-bold\">Minhas Anotações</h2>\n          \n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"icon\" data-testid=\"button-create-note\">\n                <Plus className=\"w-4 h-4\" />\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-[95vw] w-full mx-auto\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingNote ? 'Editar Anotação' : 'Nova Anotação'}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\">Título</Label>\n                  <Input\n                    id=\"title\"\n                    value={newNote.title}\n                    onChange={(e) => setNewNote({ ...newNote, title: e.target.value })}\n                    placeholder=\"Título da anotação\"\n                    data-testid=\"input-note-title\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"type\">Tipo</Label>\n                  <Select \n                    value={newNote.type} \n                    onValueChange={(value: Note['type']) => setNewNote({ ...newNote, type: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-note-type\">\n                      <SelectValue placeholder=\"Selecione o tipo\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"reflection\">Reflexão</SelectItem>\n                      <SelectItem value=\"devotional\">Devocional</SelectItem>\n                      <SelectItem value=\"prayer\">Oração</SelectItem>\n                      <SelectItem value=\"verses\">Versículos</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"content\">Conteúdo</Label>\n                  <Textarea\n                    id=\"content\"\n                    value={newNote.content}\n                    onChange={(e) => setNewNote({ ...newNote, content: e.target.value })}\n                    placeholder=\"Escreva sua anotação aqui...\"\n                    rows={6}\n                    data-testid=\"textarea-note-content\"\n                  />\n                </div>\n                \n                <div className=\"flex space-x-2 pt-4\">\n                  <Button type=\"submit\" className=\"flex-1\" data-testid=\"button-save-note\">\n                    {editingNote ? 'Atualizar' : 'Salvar'}\n                  </Button>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => {\n                      setIsDialogOpen(false);\n                      setEditingNote(null);\n                      setNewNote({ title: \"\", content: \"\", type: \"reflection\" });\n                    }}\n                    data-testid=\"button-cancel-note\"\n                  >\n                    Cancelar\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Search */}\n        <div className=\"relative mb-6\">\n          <Input\n            type=\"text\"\n            placeholder=\"Buscar anotações...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-notes\"\n          />\n          <Search className=\"w-4 h-4 absolute left-3 top-3.5 text-muted-foreground\" />\n        </div>\n\n        {/* Notes List */}\n        <div className=\"space-y-4\">\n          {filteredNotes.length === 0 ? (\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <p className=\"text-muted-foreground\">\n                  {searchQuery ? 'Nenhuma anotação encontrada.' : 'Você ainda não tem anotações.'}\n                </p>\n                {!searchQuery && (\n                  <Button \n                    className=\"mt-4\" \n                    onClick={() => setIsDialogOpen(true)}\n                    data-testid=\"button-first-note\"\n                  >\n                    Criar primeira anotação\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          ) : (\n            filteredNotes.map((note) => (\n              <Card key={note.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-note-${note.id}`}>\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <h4 className=\"font-semibold\">{note.title}</h4>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {formatDate(note.createdAt)}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-3 line-clamp-3\">\n                    {note.content}\n                  </p>\n                  <div className=\"flex items-center justify-between\">\n                    <Badge className={getTypeColor(note.type)}>\n                      {getTypeLabel(note.type)}\n                    </Badge>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => handleEdit(note)}\n                        data-testid={`button-edit-note-${note.id}`}\n                      >\n                        <Edit className=\"w-4 h-4 text-muted-foreground\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        data-testid={`button-share-note-${note.id}`}\n                      >\n                        <Share2 className=\"w-4 h-4 text-muted-foreground\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        onClick={() => handleDelete(note.id)}\n                        data-testid={`button-delete-note-${note.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4 text-destructive\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      </div>\n    </MobileContainer>\n  );\n}\n","size_bytes":10117},"client/src/pages/onboarding.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Camera } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { MobileContainer } from \"@/components/ui/mobile-container\";\nimport { useApp } from \"@/context/app-context\";\nimport { UserProfile } from \"@shared/schema\";\n\nexport default function Onboarding() {\n  const [name, setName] = useState(\"\");\n  const [photo, setPhoto] = useState<string | undefined>();\n  const { setUser } = useApp();\n  const [, setLocation] = useLocation();\n\n  // Gerar avatar automaticamente quando o nome mudar\n  useEffect(() => {\n    if (name.trim()) {\n      const avatarUrl = `https://ui-avatars.com/api/?name=${encodeURIComponent(name.trim())}&background=3b82f6&color=fff&size=128`;\n      setPhoto(avatarUrl);\n    } else {\n      setPhoto(undefined);\n    }\n  }, [name]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!name.trim()) {\n      alert(\"Por favor, digite seu nome\");\n      return;\n    }\n\n    const newUser: UserProfile = {\n      id: Date.now().toString(),\n      name: name.trim(),\n      photo,\n      createdAt: new Date().toISOString(),\n    };\n\n    setUser(newUser);\n    setLocation(\"/\");\n  };\n\n  const handlePhotoClick = () => {\n    // In a real app, this would open image picker\n    alert(\"Funcionalidade de foto será implementada com Expo Image Picker\");\n  };\n\n  return (\n    <MobileContainer>\n      <div className=\"min-h-screen flex flex-col justify-center p-6\">\n        <div className=\"text-center mb-8\">\n          <div className=\"w-16 h-16 mx-auto mb-6 rounded-full bg-gradient-to-r from-primary to-secondary flex items-center justify-center\">\n            <span className=\"text-2xl\">💙</span>\n          </div>\n          \n          <h1 className=\"text-3xl font-bold gradient-text mb-4\">Verso & Paz</h1>\n          <h1 className=\"text-2xl font-semibold mb-6\">Você não está sozinho</h1>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"text-center mb-6\">\n            <div className=\"w-24 h-24 mx-auto mb-4 rounded-full bg-primary flex items-center justify-center\">\n              {photo ? (\n                <img src={photo} alt=\"Preview\" className=\"w-24 h-24 rounded-full object-cover\" />\n              ) : (\n                <span className=\"text-primary-foreground font-semibold text-lg\">\n                  {name.charAt(0).toUpperCase() || '?'}\n                </span>\n              )}\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"name\" className=\"text-sm font-medium mb-2 block\">\n              Como podemos te chamar?\n            </Label>\n            <Input \n              id=\"name\"\n              type=\"text\" \n              placeholder=\"Seu nome\" \n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              className=\"w-full p-4 rounded-lg\"\n              data-testid=\"input-name\"\n            />\n          </div>\n\n\n          <Button \n            type=\"submit\"\n            className=\"w-full p-4 rounded-lg font-semibold\"\n            data-testid=\"button-start-journey\"\n          >\n            Começar Jornada\n          </Button>\n        </form>\n      </div>\n    </MobileContainer>\n  );\n}\n","size_bytes":3369},"client/src/pages/quiz.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { MobileContainer } from \"@/components/ui/mobile-container\";\nimport { useApp } from \"@/context/app-context\";\nimport { getVerseForEmotion } from \"@/data/bible-verses\";\n\ntype Emotion = 'alegre' | 'preocupado' | 'triste' | 'esperancoso' | 'grato';\n\nconst emotions = [\n  { \n    id: 'alegre' as Emotion, \n    emoji: '😊', \n    title: 'Alegre', \n    description: 'Gratidão e felicidade' \n  },\n  { \n    id: 'preocupado' as Emotion, \n    emoji: '😟', \n    title: 'Preocupado', \n    description: 'Ansiedade e preocupações' \n  },\n  { \n    id: 'triste' as Emotion, \n    emoji: '😢', \n    title: 'Triste', \n    description: 'Precisando de conforto' \n  },\n  { \n    id: 'esperancoso' as Emotion, \n    emoji: '🙏', \n    title: 'Esperançoso', \n    description: 'Fé e expectativa' \n  },\n  { \n    id: 'grato' as Emotion, \n    emoji: '🤲', \n    title: 'Grato', \n    description: 'Reconhecendo bênçãos' \n  }\n];\n\nexport default function Quiz() {\n  const { user } = useApp();\n  const [, setLocation] = useLocation();\n  const [selectedEmotion, setSelectedEmotion] = useState<Emotion | null>(null);\n  const [showResponse, setShowResponse] = useState(false);\n  const [responseVerse, setResponseVerse] = useState<any>(null);\n\n  const handleEmotionSelect = (emotion: Emotion) => {\n    setSelectedEmotion(emotion);\n    const verse = getVerseForEmotion(emotion);\n    setResponseVerse(verse);\n    setShowResponse(true);\n\n    // Store response (in a real app, this would be more sophisticated)\n    setTimeout(() => {\n      setLocation(\"/\");\n    }, 5000);\n  };\n\n  const userName = user?.name || \"Amigo\";\n\n  if (showResponse && responseVerse) {\n    return (\n      <MobileContainer>\n        <div className=\"min-h-screen flex flex-col justify-center p-6\">\n          <div className=\"text-center mb-8\">\n            <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-primary/10 flex items-center justify-center\">\n              <Heart className=\"w-8 h-8 text-primary\" />\n            </div>\n            <h2 className=\"text-2xl font-semibold mb-2\">Deus tem uma palavra para você</h2>\n            <p className=\"text-muted-foreground\">Baseado em como você está se sentindo</p>\n          </div>\n\n          <Card className=\"shadow-sm\">\n            <CardContent className=\"p-6\">\n              <p className=\"bible-verse text-lg mb-4 text-center\" data-testid=\"text-response-verse\">\n                \"{responseVerse.text}\"\n              </p>\n              <p className=\"text-center text-sm text-muted-foreground\" data-testid=\"text-response-reference\">\n                {responseVerse.reference}\n              </p>\n            </CardContent>\n          </Card>\n\n          <div className=\"mt-8 text-center\">\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Retornando à tela inicial em alguns segundos...\n            </p>\n            <Button \n              onClick={() => setLocation(\"/\")} \n              variant=\"outline\"\n              data-testid=\"button-return-home\"\n            >\n              Voltar agora\n            </Button>\n          </div>\n        </div>\n      </MobileContainer>\n    );\n  }\n\n  return (\n    <MobileContainer>\n      <div className=\"min-h-screen flex flex-col justify-center p-6\">\n        <div className=\"text-center mb-8\">\n          <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-primary/10 flex items-center justify-center\">\n            <Heart className=\"w-8 h-8 text-primary\" />\n          </div>\n          <h2 className=\"text-2xl font-semibold mb-2\" data-testid=\"text-quiz-greeting\">\n            Oi {userName}, como você está se sentindo hoje?\n          </h2>\n          <p className=\"text-muted-foreground\">Sua resposta nos ajuda a conectar você com a palavra certa</p>\n        </div>\n\n        <div className=\"space-y-3\">\n          {emotions.map((emotion) => (\n            <Card \n              key={emotion.id}\n              className=\"quiz-option cursor-pointer hover:border-primary hover:shadow-md transition-all\"\n              onClick={() => handleEmotionSelect(emotion.id)}\n              data-testid={`button-emotion-${emotion.id}`}\n            >\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center\">\n                  <span className=\"text-2xl mr-3\">{emotion.emoji}</span>\n                  <div>\n                    <h4 className=\"font-medium\">{emotion.title}</h4>\n                    <p className=\"text-sm text-muted-foreground\">{emotion.description}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <Button \n          variant=\"ghost\" \n          onClick={() => setLocation(\"/\")} \n          className=\"w-full mt-8 text-muted-foreground\"\n          data-testid=\"button-answer-later\"\n        >\n          Responder depois\n        </Button>\n      </div>\n    </MobileContainer>\n  );\n}\n","size_bytes":5079},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { User, Bell, Moon, MessageSquare, Store, Share2, Heart, Edit, Instagram, Youtube, Clock, TestTube2, Camera } from \"lucide-react\";\nimport { SiTiktok } from \"react-icons/si\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { MobileContainer } from \"@/components/ui/mobile-container\";\nimport { useApp } from \"@/context/app-context\";\nimport { useNotifications } from \"@/context/notification-context\";\nimport { useTheme } from \"@/hooks/use-theme\";\nimport { Link } from \"wouter\";\n\nexport default function Settings() {\n  const { user, setUser, settings, setSettings } = useApp();\n  const { requestPermission, sendTestNotification, scheduleNotifications, getPermissionStatus } = useNotifications();\n  const { isDarkMode, toggleTheme } = useTheme();\n  const [feedback, setFeedback] = useState(\"\");\n  const [isEditingProfile, setIsEditingProfile] = useState(false);\n  const [editName, setEditName] = useState(user?.name || \"\");\n  const [isAddingPhoto, setIsAddingPhoto] = useState(false);\n\n  const handleSaveFeedback = () => {\n    if (feedback.trim()) {\n      // In a real app, this would send feedback via email API\n      alert(\"Feedback enviado! Obrigado por compartilhar suas sugestões conosco.\");\n      setFeedback(\"\");\n    }\n  };\n\n  const handleSaveProfile = () => {\n    if (user && editName.trim()) {\n      setUser({\n        ...user,\n        name: editName.trim(),\n      });\n      setIsEditingProfile(false);\n    }\n  };\n\n  const handleAddPhoto = (photoUrl?: string) => {\n    if (user) {\n      // For now, we'll use a placeholder avatar or remove photo\n      const newPhotoUrl = photoUrl || `https://ui-avatars.com/api/?name=${encodeURIComponent(user.name)}&background=3b82f6&color=fff&size=128`;\n      setUser({\n        ...user,\n        photo: newPhotoUrl,\n      });\n    }\n    setIsAddingPhoto(false);\n  };\n\n  const handleNotificationToggle = async (checked: boolean) => {\n    if (checked && getPermissionStatus() !== 'granted') {\n      const granted = await requestPermission();\n      if (!granted) {\n        alert(\"Precisamos da sua permissão para enviar notificações carinhosas! Por favor, permita nas configurações do navegador.\");\n        return;\n      }\n    }\n    \n    setSettings({\n      ...settings,\n      notificationsEnabled: checked,\n    });\n    \n    scheduleNotifications(checked);\n  };\n\n  const handleTestNotification = () => {\n    if (getPermissionStatus() === 'granted') {\n      sendTestNotification();\n    } else {\n      alert(\"Por favor, ative as notificações primeiro.\");\n    }\n  };\n\n  const getMembershipDuration = () => {\n    if (!user) return \"Novo membro\";\n    const created = new Date(user.createdAt);\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - created.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) return \"Membro desde hoje\";\n    if (diffDays < 30) return `Membro há ${diffDays} dias`;\n    const months = Math.floor(diffDays / 30);\n    return `Membro há ${months} ${months === 1 ? 'mês' : 'meses'}`;\n  };\n\n  return (\n    <MobileContainer>\n      <div className=\"p-4 pb-24\">\n\n        {/* User Profile */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <div className=\"w-16 h-16 rounded-full bg-primary flex items-center justify-center\">\n                  {user?.photo ? (\n                    <img src={user.photo} alt=\"Profile\" className=\"w-16 h-16 rounded-full object-cover\" />\n                  ) : (\n                    <User className=\"w-6 h-6 text-primary-foreground\" />\n                  )}\n                </div>\n                <button\n                  onClick={() => setIsAddingPhoto(true)}\n                  className=\"absolute -bottom-1 -right-1 w-6 h-6 bg-secondary rounded-full flex items-center justify-center border-2 border-background hover:bg-secondary/80\"\n                  data-testid=\"button-add-photo\"\n                >\n                  <Camera className=\"w-3 h-3 text-secondary-foreground\" />\n                </button>\n              </div>\n              <div className=\"flex-1\">\n                <h3 className=\"text-xl font-semibold mb-1\" data-testid=\"text-user-name\">\n                  {user?.name || \"Usuário\"}\n                </h3>\n                <p className=\"text-muted-foreground text-sm mb-2\">\n                  {getMembershipDuration()}\n                </p>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={() => {\n                    setEditName(user?.name || \"\");\n                    setIsEditingProfile(true);\n                  }}\n                  className=\"p-0 h-auto text-primary\"\n                  data-testid=\"button-edit-profile\"\n                >\n                  <Edit className=\"w-3 h-3 mr-1\" />\n                  Editar nome\n                </Button>\n              </div>\n            </div>\n            \n            {/* Photo Dialog */}\n            <Dialog open={isAddingPhoto} onOpenChange={setIsAddingPhoto}>\n              <DialogContent className=\"max-w-[95vw] w-full mx-auto\">\n                <DialogHeader>\n                  <DialogTitle>Adicionar Foto</DialogTitle>\n                </DialogHeader>\n                <div className=\"text-center py-6\">\n                  <div className=\"w-24 h-24 mx-auto mb-4 rounded-full bg-muted flex items-center justify-center border-2 border-dashed border-border\">\n                    <Camera className=\"w-8 h-8 text-muted-foreground\" />\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Escolha uma opção para sua foto de perfil:\n                  </p>\n                  <div className=\"space-y-2\">\n                    <input \n                      type=\"file\" \n                      accept=\"image/*\" \n                      className=\"hidden\" \n                      id=\"photo-upload\"\n                      onChange={(e) => {\n                        const file = e.target.files?.[0];\n                        if (file && user) {\n                          const reader = new FileReader();\n                          reader.onload = (event) => {\n                            const photoUrl = event.target?.result as string;\n                            setUser({ ...user, photo: photoUrl });\n                            setIsAddingPhoto(false);\n                          };\n                          reader.readAsDataURL(file);\n                        }\n                      }}\n                    />\n                    <Button \n                      onClick={() => document.getElementById('photo-upload')?.click()}\n                      className=\"w-full\"\n                      data-testid=\"button-upload-photo\"\n                    >\n                      Fazer Upload de Foto\n                    </Button>\n                    <Button \n                      variant=\"outline\"\n                      onClick={() => {\n                        if (user) {\n                          setUser({ ...user, photo: undefined });\n                        }\n                        setIsAddingPhoto(false);\n                      }}\n                      className=\"w-full\"\n                      data-testid=\"button-remove-photo\"\n                    >\n                      Remover Foto\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n\n            {/* Edit Name Dialog */}\n            <Dialog open={isEditingProfile} onOpenChange={setIsEditingProfile}>\n              <DialogContent className=\"max-w-[95vw] w-full mx-auto\">\n                <DialogHeader>\n                  <DialogTitle>Editar Nome</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"edit-name\">Nome</Label>\n                    <Input\n                      id=\"edit-name\"\n                      value={editName}\n                      onChange={(e) => setEditName(e.target.value)}\n                      placeholder=\"Seu nome\"\n                      data-testid=\"input-edit-name\"\n                    />\n                  </div>\n                  <div className=\"flex space-x-2 pt-4\">\n                    <Button onClick={handleSaveProfile} className=\"flex-1\" data-testid=\"button-save-profile\">\n                      Salvar\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setIsEditingProfile(false)}\n                      data-testid=\"button-cancel-profile\"\n                    >\n                      Cancelar\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </CardContent>\n        </Card>\n\n        {/* Settings Options */}\n        <div className=\"space-y-4\">\n          {/* Dark Mode */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <Moon className=\"w-5 h-5 text-primary mr-3\" />\n                  <h4 className=\"font-semibold\">Modo Escuro</h4>\n                </div>\n                <Switch \n                  checked={isDarkMode}\n                  onCheckedChange={toggleTheme}\n                  data-testid=\"switch-dark-mode\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Alarme de Oração */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center\">\n                  <Bell className=\"w-5 h-5 text-primary mr-3\" />\n                  <h4 className=\"font-semibold\">Alarme de Oração</h4>\n                </div>\n                <Switch \n                  checked={settings.prayerAlarmEnabled || false}\n                  onCheckedChange={(checked) => setSettings({...settings, prayerAlarmEnabled: checked})}\n                  data-testid=\"switch-prayer-alarm\"\n                />\n              </div>\n              {settings.prayerAlarmEnabled && (\n                <div className=\"space-y-3 mt-4\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Switch \n                          checked={settings.morningPrayerEnabled || false}\n                          onCheckedChange={(checked) => setSettings({...settings, morningPrayerEnabled: checked})}\n                          data-testid=\"switch-morning-prayer\"\n                        />\n                        <div>\n                          <Label className=\"text-sm font-medium\">Alarme da Manhã</Label>\n                          <p className=\"text-xs text-muted-foreground\">Lembrete matinal de oração</p>\n                        </div>\n                      </div>\n                      {settings.morningPrayerEnabled && (\n                        <Input \n                          type=\"time\" \n                          value={settings.morningPrayerTime || '07:00'}\n                          onChange={(e) => setSettings({...settings, morningPrayerTime: e.target.value})}\n                          className=\"w-24\"\n                          data-testid=\"input-morning-prayer\"\n                        />\n                      )}\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Switch \n                          checked={settings.eveningPrayerEnabled || false}\n                          onCheckedChange={(checked) => setSettings({...settings, eveningPrayerEnabled: checked})}\n                          data-testid=\"switch-evening-prayer\"\n                        />\n                        <div>\n                          <Label className=\"text-sm font-medium\">Alarme da Noite</Label>\n                          <p className=\"text-xs text-muted-foreground\">Lembrete noturno de oração</p>\n                        </div>\n                      </div>\n                      {settings.eveningPrayerEnabled && (\n                        <Input \n                          type=\"time\" \n                          value={settings.eveningPrayerTime || '19:00'}\n                          onChange={(e) => setSettings({...settings, eveningPrayerTime: e.target.value})}\n                          className=\"w-24\"\n                          data-testid=\"input-evening-prayer\"\n                        />\n                      )}\n                    </div>\n                  </div>\n                  {(settings.morningPrayerEnabled || settings.eveningPrayerEnabled) && (\n                    <div className=\"space-y-3\">\n                      <div>\n                        <Label className=\"text-xs text-muted-foreground mb-2 block\">Som do Alarme</Label>\n                        <select \n                          value={settings.prayerAlarmSound || 'bell'}\n                          onChange={(e) => setSettings({...settings, prayerAlarmSound: e.target.value})}\n                          className=\"w-full p-2 border rounded-md bg-background text-sm\"\n                          data-testid=\"select-prayer-sound\"\n                        >\n                          <option value=\"bell\">Sino Suave</option>\n                          <option value=\"chime\">Carrilhão</option>\n                          <option value=\"nature\">Sons da Natureza</option>\n                          <option value=\"worship\">Música de Adoração</option>\n                          <option value=\"peaceful\">Melodia Pacifica</option>\n                        </select>\n                      </div>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"w-full\"\n                        data-testid=\"button-test-prayer-alarm\"\n                      >\n                        Testar Som\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Store Link */}\n          <div className=\"mt-4\">\n          <Link href=\"/store\">\n            <Card className=\"cursor-pointer hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <Store className=\"w-5 h-5 text-primary mr-3\" />\n                    <div>\n                      <h4 className=\"font-semibold\">Nossa Loja</h4>\n                      <p className=\"text-sm text-muted-foreground\">Produtos cristãos</p>\n                    </div>\n                  </div>\n                  <div className=\"text-primary\" data-testid=\"link-store-arrow\">\n                    →\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </Link>\n          </div>\n\n          {/* Social Media */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <h4 className=\"font-semibold mb-3 flex items-center\">\n                <Share2 className=\"w-5 h-5 text-primary mr-3\" />\n                Redes Sociais\n              </h4>\n              <div className=\"grid grid-cols-3 gap-2\">\n                <a \n                  href=\"#\" \n                  className=\"flex flex-col items-center space-y-1 p-3 rounded-lg hover:bg-muted transition-colors\"\n                  data-testid=\"link-instagram-settings\"\n                >\n                  <Instagram className=\"w-6 h-6 text-pink-500\" />\n                  <span className=\"text-xs font-medium\">Instagram</span>\n                </a>\n                <a \n                  href=\"#\" \n                  className=\"flex flex-col items-center space-y-1 p-3 rounded-lg hover:bg-muted transition-colors\"\n                  data-testid=\"link-youtube-settings\"\n                >\n                  <Youtube className=\"w-6 h-6 text-red-500\" />\n                  <span className=\"text-xs font-medium\">YouTube</span>\n                </a>\n                <a \n                  href=\"#\" \n                  className=\"flex flex-col items-center space-y-1 p-3 rounded-lg hover:bg-muted transition-colors\"\n                  data-testid=\"link-tiktok-settings\"\n                >\n                  <SiTiktok className=\"w-6 h-6 text-black dark:text-white\" />\n                  <span className=\"text-xs font-medium\">TikTok</span>\n                </a>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Feedback */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center mb-3\">\n                <MessageSquare className=\"w-5 h-5 text-primary mr-3\" />\n                <h4 className=\"font-semibold\">Sugestões</h4>\n              </div>\n              <Textarea \n                placeholder=\"Compartilhe suas sugestões...\" \n                value={feedback}\n                onChange={(e) => setFeedback(e.target.value)}\n                className=\"resize-none h-20 text-sm mb-2\"\n                data-testid=\"textarea-feedback\"\n              />\n              <Button \n                size=\"sm\" \n                onClick={handleSaveFeedback}\n                disabled={!feedback.trim()}\n                data-testid=\"button-send-feedback\"\n              >\n                Enviar Sugestão\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Inspirational Message */}\n        <Card className=\"mt-8\">\n          <CardContent className=\"p-6 bg-gradient-to-r from-primary to-secondary text-white text-center rounded-lg\">\n            <Heart className=\"w-8 h-8 mx-auto mb-3\" />\n            <p className=\"font-medium\">\n              \"Que Deus continue abençoando sua jornada espiritual. Você não caminha sozinho!\"\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </MobileContainer>\n  );\n}\n","size_bytes":18741},"client/src/pages/store.tsx":{"content":"import { ShoppingBag, Shield } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { MobileContainer } from \"@/components/ui/mobile-container\";\n\nconst products = [\n  {\n    id: 1,\n    name: \"Pulseira QR Cristã\",\n    description: \"Conecte-se instantaneamente ao verso do dia\",\n    price: 29.90,\n    image: \"https://images.unsplash.com/photo-1515562141207-7a88fb7ce338?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n    featured: true,\n  },\n  {\n    id: 2,\n    name: \"Bíblia de Estudo\",\n    description: \"Tradução ACF com notas\",\n    price: 89.90,\n    image: \"https://images.unsplash.com/photo-1481627834876-b7833e8f5570?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n  },\n  {\n    id: 3,\n    name: \"Camiseta Fé\",\n    description: \"100% algodão cristão\",\n    price: 39.90,\n    image: \"https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n  },\n  {\n    id: 4,\n    name: \"Caneca Inspiração\",\n    description: \"Para seus momentos com Deus\",\n    price: 24.90,\n    image: \"https://images.unsplash.com/photo-1514228742587-6b1558fcf93a?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n  },\n  {\n    id: 5,\n    name: \"Quadro Versículo\",\n    description: \"Decoração cristã\",\n    price: 59.90,\n    image: \"https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\",\n  },\n];\n\nexport default function Store() {\n  const featuredProduct = products.find(p => p.featured);\n  const otherProducts = products.filter(p => !p.featured);\n\n  const handlePurchase = (productId: number) => {\n    // Redirect to checkout page with product ID\n    window.location.href = `/checkout?product=${productId}`;\n  };\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(price);\n  };\n\n  return (\n    <MobileContainer>\n      <div className=\"p-4 pb-24\">\n        <div className=\"mb-6\">\n          <h2 className=\"text-2xl font-bold mb-2\">Nossa Loja</h2>\n          <p className=\"text-muted-foreground\">Produtos que fortalecem sua fé</p>\n        </div>\n\n        {/* Featured Product */}\n        {featuredProduct && (\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-6\">\n              <img \n                src={featuredProduct.image} \n                alt={featuredProduct.name}\n                className=\"w-full h-48 object-cover rounded-lg mb-4\" \n              />\n              <h3 className=\"text-xl font-bold mb-2\">{featuredProduct.name}</h3>\n              <p className=\"text-muted-foreground mb-4\">{featuredProduct.description}</p>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-2xl font-bold text-primary\">\n                  {formatPrice(featuredProduct.price)}\n                </span>\n                <Button \n                  onClick={() => handlePurchase(featuredProduct.id)}\n                  data-testid={`button-buy-${featuredProduct.id}`}\n                >\n                  Comprar Agora\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Product Grid */}\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          {otherProducts.map((product) => (\n            <Card key={product.id} data-testid={`card-product-${product.id}`}>\n              <CardContent className=\"p-4\">\n                <img \n                  src={product.image} \n                  alt={product.name}\n                  className=\"w-full h-32 object-cover rounded-lg mb-3\" \n                />\n                <h4 className=\"font-semibold mb-2\">{product.name}</h4>\n                <p className=\"text-sm text-muted-foreground mb-2\">{product.description}</p>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"font-bold text-primary\">{formatPrice(product.price)}</span>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    onClick={() => handlePurchase(product.id)}\n                    data-testid={`button-view-${product.id}`}\n                  >\n                    Ver\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Payment Info */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3 mb-2\">\n              <Shield className=\"w-5 h-5 text-primary\" />\n              <span className=\"font-medium\">Pagamento Seguro</span>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Aceitamos cartão, PIX e boleto via Mercado Pago\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Shopping Cart Float */}\n        <Button \n          className=\"fixed bottom-20 right-4 rounded-full w-14 h-14 shadow-lg\"\n          data-testid=\"button-cart\"\n        >\n          <ShoppingBag className=\"w-6 h-6\" />\n        </Button>\n      </div>\n    </MobileContainer>\n  );\n}\n","size_bytes":5160},"client/src/components/layout/bottom-navigation.tsx":{"content":"import { Home, BookOpen, Music, Store, Settings } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\n\nexport function BottomNavigation() {\n  const [location] = useLocation();\n\n  const navItems = [\n    { path: \"/\", icon: Home, label: \"Início\" },\n    { path: \"/bible\", icon: BookOpen, label: \"Bíblia\" },\n    { path: \"/hymnal\", icon: Music, label: \"Hinário\" },\n    { path: \"/store\", icon: Store, label: \"Loja\" },\n    { path: \"/settings\", icon: Settings, label: \"Config\" },\n  ];\n\n  return (\n    <div className=\"fixed bottom-0 left-1/2 transform -translate-x-1/2 max-w-[428px] w-full bg-card border-t border-border z-40\">\n      <div className=\"flex items-center justify-around p-4\">\n        {navItems.map(({ path, icon: Icon, label }) => {\n          const isActive = location === path;\n          return (\n            <Link\n              key={path}\n              href={path}\n              className={`flex flex-col items-center space-y-1 transition-colors ${\n                isActive\n                  ? \"text-primary\"\n                  : \"text-muted-foreground hover:text-primary\"\n              }`}\n              data-testid={`nav-${label.toLowerCase()}`}\n            >\n              <Icon className=\"w-5 h-5\" />\n              <span className=\"text-xs\">{label}</span>\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1356},"client/src/components/layout/floating-quiz-button.tsx":{"content":"import { MessageCircle } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport function FloatingQuizButton() {\n  return (\n    <Link \n      href=\"/quiz\"\n      className=\"fixed bottom-24 right-5 bg-secondary text-secondary-foreground w-14 h-14 rounded-full shadow-lg hover:shadow-xl transition-shadow flex items-center justify-center z-50\"\n      data-testid=\"button-quiz-float\"\n    >\n      <MessageCircle className=\"w-6 h-6\" />\n    </Link>\n  );\n}\n","size_bytes":451},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/mobile-container.tsx":{"content":"import { ReactNode } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MobileContainerProps {\n  children: ReactNode;\n  className?: string;\n}\n\nexport function MobileContainer({ children, className }: MobileContainerProps) {\n  return (\n    <div className={cn(\"app-container\", className)}>\n      {children}\n    </div>\n  );\n}\n","size_bytes":331},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/layout/top-bar.tsx":{"content":"import { Heart } from \"lucide-react\";\n\nexport function TopBar() {\n  return (\n    <div className=\"bg-background border-b border-border/30\">\n      <div className=\"flex items-center justify-center px-4 py-3\">\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-lg\">🕊️</span>\n          <span className=\"text-sm font-medium text-muted-foreground tracking-wide\">\n            Verso & Paz\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":483},"client/src/components/modals/quiz-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Heart, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { useApp } from \"@/context/app-context\";\nimport { getVerseForEmotion } from \"@/data/bible-verses\";\n\ntype Emotion = 'alegre' | 'preocupado' | 'triste' | 'esperancoso' | 'grato';\n\nconst emotions = [\n  { \n    id: 'alegre' as Emotion, \n    emoji: '😊', \n    title: 'Alegre', \n    description: 'Gratidão e felicidade' \n  },\n  { \n    id: 'preocupado' as Emotion, \n    emoji: '😟', \n    title: 'Preocupado', \n    description: 'Ansiedade e preocupações' \n  },\n  { \n    id: 'triste' as Emotion, \n    emoji: '😢', \n    title: 'Triste', \n    description: 'Precisando de conforto' \n  },\n  { \n    id: 'esperancoso' as Emotion, \n    emoji: '🙏', \n    title: 'Esperançoso', \n    description: 'Fé e expectativa' \n  },\n  { \n    id: 'grato' as Emotion, \n    emoji: '🤲', \n    title: 'Grato', \n    description: 'Reconhecendo bênçãos' \n  }\n];\n\nexport function QuizModal() {\n  const { user } = useApp();\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedEmotion, setSelectedEmotion] = useState<Emotion | null>(null);\n  const [showResponse, setShowResponse] = useState(false);\n  const [responseVerse, setResponseVerse] = useState<any>(null);\n\n  useEffect(() => {\n    const handleShowQuizModal = () => {\n      setIsOpen(true);\n      setSelectedEmotion(null);\n      setShowResponse(false);\n      setResponseVerse(null);\n    };\n\n    window.addEventListener('show-quiz-modal', handleShowQuizModal);\n    return () => window.removeEventListener('show-quiz-modal', handleShowQuizModal);\n  }, []);\n\n  const handleEmotionSelect = (emotion: Emotion) => {\n    setSelectedEmotion(emotion);\n    const verse = getVerseForEmotion(emotion);\n    setResponseVerse(verse);\n    setShowResponse(true);\n\n    // Auto-close after 8 seconds\n    setTimeout(() => {\n      setIsOpen(false);\n    }, 8000);\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n    setSelectedEmotion(null);\n    setShowResponse(false);\n    setResponseVerse(null);\n  };\n\n  const userName = user?.name || \"Amigo\";\n\n  if (showResponse && responseVerse) {\n    return (\n      <Dialog open={isOpen} onOpenChange={setIsOpen}>\n        <DialogContent className=\"max-w-[95vw] w-full mx-auto\">\n          <div className=\"absolute right-4 top-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleClose}\n              className=\"h-6 w-6\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          <div className=\"text-center p-6\">\n            <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-primary/10 flex items-center justify-center\">\n              <Heart className=\"w-8 h-8 text-primary\" />\n            </div>\n            <h2 className=\"text-xl font-semibold mb-2\">Deus tem uma palavra para você</h2>\n            <p className=\"text-muted-foreground mb-6\">Baseado em como você está se sentindo</p>\n\n            <Card className=\"shadow-sm mb-6\">\n              <CardContent className=\"p-6\">\n                <p className=\"bible-verse text-lg mb-4 text-center\">\n                  \"{responseVerse.text}\"\n                </p>\n                <p className=\"text-center text-sm text-muted-foreground\">\n                  {responseVerse.reference}\n                </p>\n              </CardContent>\n            </Card>\n\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Esta janela se fechará automaticamente em alguns segundos...\n            </p>\n            <Button onClick={handleClose} variant=\"outline\" size=\"sm\">\n              Fechar\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogContent className=\"max-w-[95vw] w-full mx-auto max-h-[90vh] overflow-y-auto\">\n        <div className=\"absolute right-4 top-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={handleClose}\n            className=\"h-6 w-6\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        \n        <div className=\"p-6\">\n          <div className=\"text-center mb-6\">\n            <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-primary/10 flex items-center justify-center\">\n              <Heart className=\"w-8 h-8 text-primary\" />\n            </div>\n            <h2 className=\"text-xl font-semibold mb-2\">\n              Oi {userName}, como você está se sentindo hoje?\n            </h2>\n            <p className=\"text-muted-foreground\">Sua resposta nos ajuda a conectar você com a palavra certa</p>\n          </div>\n\n          <div className=\"space-y-3\">\n            {emotions.map((emotion) => (\n              <Card \n                key={emotion.id}\n                className=\"quiz-option cursor-pointer hover:border-primary hover:shadow-md transition-all\"\n                onClick={() => handleEmotionSelect(emotion.id)}\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center\">\n                    <span className=\"text-2xl mr-3\">{emotion.emoji}</span>\n                    <div>\n                      <h4 className=\"font-medium\">{emotion.title}</h4>\n                      <p className=\"text-sm text-muted-foreground\">{emotion.description}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <Button \n            variant=\"ghost\" \n            onClick={handleClose} \n            className=\"w-full mt-6 text-muted-foreground\"\n          >\n            Responder depois\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5939},"client/src/context/notification-context.tsx":{"content":"import { createContext, useContext, useEffect, ReactNode } from 'react';\nimport { useApp } from './app-context';\nimport { notificationService } from '@/services/notification-service';\n\ninterface NotificationContextType {\n  requestPermission: () => Promise<boolean>;\n  sendTestNotification: () => void;\n  scheduleNotifications: (enabled: boolean) => void;\n  getPermissionStatus: () => NotificationPermission;\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport function NotificationProvider({ children }: { children: ReactNode }) {\n  const { user, settings } = useApp();\n\n  useEffect(() => {\n    // Initialize notification system when user and settings are available\n    if (user && settings.notificationsEnabled) {\n      notificationService.scheduleQuizNotifications(user.name, settings.notificationsEnabled);\n    }\n  }, [user, settings.notificationsEnabled]);\n\n  const requestPermission = async (): Promise<boolean> => {\n    return await notificationService.requestPermission();\n  };\n\n  const sendTestNotification = (): void => {\n    if (user) {\n      notificationService.sendTestQuizNotification(user.name);\n    }\n  };\n\n  const scheduleNotifications = (enabled: boolean): void => {\n    if (user) {\n      notificationService.scheduleQuizNotifications(user.name, enabled);\n    }\n  };\n\n  const getPermissionStatus = (): NotificationPermission => {\n    return notificationService.getPermissionStatus();\n  };\n\n  const value = {\n    requestPermission,\n    sendTestNotification,\n    scheduleNotifications,\n    getPermissionStatus\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n}\n\nexport function useNotifications(): NotificationContextType {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n}","size_bytes":1953},"client/src/services/notification-service.ts":{"content":"// Simple notification service for quiz reminders\nexport class NotificationService {\n  private static instance: NotificationService;\n  private permission: NotificationPermission = 'default';\n  private quizScheduleKey = 'quiz-schedule';\n  private lastQuizKey = 'last-quiz-sent';\n  private activeTimers: number[] = [];\n\n  static getInstance(): NotificationService {\n    if (!NotificationService.instance) {\n      NotificationService.instance = new NotificationService();\n    }\n    return NotificationService.instance;\n  }\n\n  async requestPermission(): Promise<boolean> {\n    if (!('Notification' in window)) {\n      console.warn('This browser does not support notifications');\n      return false;\n    }\n\n    this.permission = await Notification.requestPermission();\n    return this.permission === 'granted';\n  }\n\n  getPermissionStatus(): NotificationPermission {\n    // Always read fresh from the browser\n    return ('Notification' in window) ? Notification.permission : 'denied';\n  }\n\n  // Schedule quiz notifications every 3 days\n  scheduleQuizNotifications(userName: string, enabled: boolean = true): void {\n    // Clear existing timers\n    this.clearScheduledNotifications();\n\n    if (!enabled || this.getPermissionStatus() !== 'granted') {\n      return;\n    }\n\n    // Set up recurring notifications every 3 days\n    const scheduleNextQuiz = () => {\n      const now = new Date();\n      const lastQuiz = localStorage.getItem(this.lastQuizKey);\n      const lastQuizDate = lastQuiz ? new Date(lastQuiz) : new Date(0);\n      \n      // Check if 3 days have passed since last quiz\n      const daysDiff = Math.floor((now.getTime() - lastQuizDate.getTime()) / (1000 * 60 * 60 * 24));\n      \n      if (daysDiff >= 3) {\n        this.sendQuizNotification(userName);\n        localStorage.setItem(this.lastQuizKey, now.toISOString());\n        \n        // Schedule next notification in 3 days\n        const timerId = setTimeout(scheduleNextQuiz, 3 * 24 * 60 * 60 * 1000);\n        this.activeTimers.push(timerId);\n      } else {\n        // Schedule for remaining time\n        const remainingMs = (3 - daysDiff) * 24 * 60 * 60 * 1000;\n        const timerId = setTimeout(scheduleNextQuiz, remainingMs);\n        this.activeTimers.push(timerId);\n      }\n    };\n\n    // Start scheduling\n    scheduleNextQuiz();\n    localStorage.setItem(this.quizScheduleKey, 'active');\n  }\n\n  private clearScheduledNotifications(): void {\n    // Cancel all active timers\n    this.activeTimers.forEach(timerId => clearTimeout(timerId));\n    this.activeTimers = [];\n    localStorage.removeItem(this.quizScheduleKey);\n  }\n\n  sendQuizNotification(userName: string): void {\n    if (this.getPermissionStatus() !== 'granted') {\n      return;\n    }\n\n    const messages = [\n      `Olá ${userName}, como você está se sentindo hoje?`,\n      `${userName}, que tal compartilhar como está seu coração?`,\n      `Oi ${userName}, como Deus tem falado contigo hoje?`\n    ];\n\n    const randomMessage = messages[Math.floor(Math.random() * messages.length)];\n\n    const notification = new Notification('Verso & Paz 💙', {\n      body: randomMessage,\n      icon: '/favicon.ico',\n      badge: '/favicon.ico',\n      tag: 'quiz-reminder',\n      requireInteraction: true,\n      data: {\n        type: 'quiz',\n        timestamp: Date.now()\n      }\n    });\n\n    notification.onclick = () => {\n      window.focus();\n      // Trigger quiz modal\n      window.dispatchEvent(new CustomEvent('show-quiz-modal'));\n      notification.close();\n    };\n\n    // Auto-close after 10 seconds if not interacted with\n    setTimeout(() => {\n      notification.close();\n    }, 10000);\n  }\n\n  // For testing purposes - send notification immediately\n  sendTestQuizNotification(userName: string): void {\n    if (this.getPermissionStatus() === 'granted') {\n      this.sendQuizNotification(userName);\n    }\n  }\n}\n\nexport const notificationService = NotificationService.getInstance();","size_bytes":3903},"client/src/pages/background-music.tsx":{"content":"import { useState } from \"react\";\nimport { ArrowLeft, Play, Pause, SkipBack, SkipForward, Volume2 } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { MobileContainer } from \"@/components/ui/mobile-container\";\n\nconst backgroundMusicList = [\n  { id: 1, title: \"Paz do Senhor\", duration: \"4:32\" },\n  { id: 2, title: \"Suave Oração\", duration: \"3:45\" },\n  { id: 3, title: \"Comunhão com Deus\", duration: \"5:12\" },\n  { id: 4, title: \"Serenidade\", duration: \"4:18\" },\n  { id: 5, title: \"Reflexão Divina\", duration: \"3:58\" }\n];\n\nexport default function BackgroundMusic() {\n  const [, setLocation] = useLocation();\n  const [isPlaying, setIsPlaying] = useState(true);\n  const [currentTrack, setCurrentTrack] = useState(0);\n  const [volume, setVolume] = useState([70]);\n  const [progress, setProgress] = useState(35);\n\n  const currentMusic = backgroundMusicList[currentTrack];\n\n  const nextTrack = () => {\n    setCurrentTrack((prev) => (prev + 1) % backgroundMusicList.length);\n  };\n\n  const prevTrack = () => {\n    setCurrentTrack((prev) => (prev - 1 + backgroundMusicList.length) % backgroundMusicList.length);\n  };\n\n  return (\n    <MobileContainer>\n      <div className=\"p-4 pb-24\">\n        {/* Header */}\n        <div className=\"flex items-center mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation(\"/hymnal\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          <h1 className=\"text-xl font-bold ml-2\">Música de Fundo</h1>\n        </div>\n\n        {/* Current Playing Card */}\n        <Card className=\"hymn-player text-white mb-6\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"w-24 h-24 mx-auto mb-4 rounded-full bg-white/20 flex items-center justify-center\">\n              <span className=\"text-2xl\">🎵</span>\n            </div>\n            \n            <h2 className=\"text-xl font-bold mb-2\" data-testid=\"text-current-music\">\n              {currentMusic.title}\n            </h2>\n            <p className=\"text-white/80 mb-6\">Meditação e Oração</p>\n            \n            {/* Progress Bar */}\n            <div className=\"w-full bg-white/20 rounded-full h-2 mb-4\">\n              <div \n                className=\"bg-white h-2 rounded-full transition-all duration-1000\" \n                style={{ width: `${progress}%` }} \n              />\n            </div>\n            \n            <div className=\"flex justify-between text-sm mb-6 opacity-90\">\n              <span>1:23</span>\n              <span>{currentMusic.duration}</span>\n            </div>\n            \n            {/* Controls */}\n            <div className=\"flex items-center justify-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"text-white hover:bg-white/20\"\n                onClick={prevTrack}\n                data-testid=\"button-prev\"\n              >\n                <SkipBack className=\"w-5 h-5\" />\n              </Button>\n              \n              <Button\n                size=\"icon\"\n                className=\"w-16 h-16 rounded-full bg-white/20 hover:bg-white/30\"\n                onClick={() => setIsPlaying(!isPlaying)}\n                data-testid=\"button-play-pause\"\n              >\n                {isPlaying ? (\n                  <Pause className=\"w-6 h-6\" />\n                ) : (\n                  <Play className=\"w-6 h-6\" />\n                )}\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"text-white hover:bg-white/20\"\n                onClick={nextTrack}\n                data-testid=\"button-next\"\n              >\n                <SkipForward className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Volume Control */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <Volume2 className=\"w-4 h-4 text-muted-foreground\" />\n              <Slider\n                value={volume}\n                onValueChange={setVolume}\n                max={100}\n                step={1}\n                className=\"flex-1\"\n                data-testid=\"slider-volume\"\n              />\n              <span className=\"text-sm text-muted-foreground w-8\">{volume[0]}%</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Playlist */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-semibold mb-4\">Lista de Reprodução</h3>\n            <div className=\"space-y-2\">\n              {backgroundMusicList.map((music, index) => (\n                <div \n                  key={music.id}\n                  className={`flex items-center p-3 rounded-lg cursor-pointer transition-colors ${\n                    currentTrack === index \n                      ? 'bg-primary/10 border border-primary/20' \n                      : 'hover:bg-muted/50'\n                  }`}\n                  onClick={() => setCurrentTrack(index)}\n                  data-testid={`music-item-${music.id}`}\n                >\n                  <div className=\"w-8 h-8 rounded-full bg-primary/20 flex items-center justify-center mr-3\">\n                    {currentTrack === index && isPlaying ? (\n                      <Pause className=\"w-4 h-4 text-primary\" />\n                    ) : (\n                      <Play className=\"w-4 h-4 text-primary\" />\n                    )}\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className={`font-medium ${currentTrack === index ? 'text-primary' : ''}`}>\n                      {music.title}\n                    </h4>\n                    <p className=\"text-sm text-muted-foreground\">{music.duration}</p>\n                  </div>\n                  {currentTrack === index && (\n                    <div className=\"text-primary text-sm font-medium\">\n                      Tocando\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"mt-6 p-4 bg-muted/30 rounded-lg text-center\">\n          <p className=\"text-sm text-muted-foreground\">\n            🔄 Reprodução em loop ativada\n          </p>\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            A música continuará tocando até você pausar\n          </p>\n        </div>\n      </div>\n    </MobileContainer>\n  );\n}","size_bytes":6760},"client/src/pages/hymn-view.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ArrowLeft, Play, Pause, Heart, Share } from \"lucide-react\";\nimport { useLocation, useParams } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { MobileContainer } from \"@/components/ui/mobile-container\";\nimport { hymns } from \"@/data/hymns\";\n\nexport default function HymnView() {\n  const [, setLocation] = useLocation();\n  const params = useParams<{ number: string }>();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [hymn, setHymn] = useState<typeof hymns[0] | null>(null);\n\n  useEffect(() => {\n    const hymnNumber = parseInt(params.number || \"0\");\n    const foundHymn = hymns.find(h => h.number === hymnNumber);\n    if (foundHymn) {\n      setHymn(foundHymn);\n      // Check if it's in favorites (this would normally come from context/state)\n      const favorites = JSON.parse(localStorage.getItem('hymn-favorites') || '[]');\n      setIsFavorite(favorites.includes(hymnNumber));\n    } else {\n      setLocation(\"/hymnal\");\n    }\n  }, [params.number, setLocation]);\n\n  const toggleFavorite = () => {\n    if (!hymn) return;\n    const favorites = JSON.parse(localStorage.getItem('hymn-favorites') || '[]');\n    let newFavorites;\n    \n    if (isFavorite) {\n      newFavorites = favorites.filter((n: number) => n !== hymn.number);\n    } else {\n      newFavorites = [hymn.number, ...favorites];\n    }\n    \n    localStorage.setItem('hymn-favorites', JSON.stringify(newFavorites));\n    setIsFavorite(!isFavorite);\n  };\n\n  const handleShare = () => {\n    if (!hymn) return;\n    if (navigator.share) {\n      navigator.share({\n        title: `Hino ${hymn.number} - ${hymn.title}`,\n        text: `Confira este hino da Harpa Cristã: ${hymn.title}`,\n        url: window.location.href\n      });\n    } else {\n      // Fallback for browsers without native share\n      navigator.clipboard.writeText(window.location.href);\n      alert('Link copiado para a área de transferência!');\n    }\n  };\n\n  if (!hymn) {\n    return (\n      <MobileContainer>\n        <div className=\"p-4\">\n          <p>Carregando hino...</p>\n        </div>\n      </MobileContainer>\n    );\n  }\n\n  return (\n    <MobileContainer>\n      <div className=\"p-4 pb-24\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation(\"/hymnal\")}\n            data-testid=\"button-back\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleShare}\n              data-testid=\"button-share\"\n            >\n              <Share className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleFavorite}\n              data-testid=\"button-favorite\"\n            >\n              <Heart className={`w-4 h-4 ${isFavorite ? 'fill-current text-red-500' : 'text-muted-foreground'}`} />\n            </Button>\n          </div>\n        </div>\n\n        {/* Hymn Header */}\n        <div className=\"text-center mb-6\">\n          <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-primary/10 flex items-center justify-center\">\n            <span className=\"text-xl font-bold text-primary\">{hymn.number}</span>\n          </div>\n          <h1 className=\"text-2xl font-bold mb-2\" data-testid=\"text-hymn-title\">\n            {hymn.title}\n          </h1>\n          <p className=\"text-muted-foreground\">Hino {hymn.number} - Harpa Cristã</p>\n        </div>\n\n        {/* Instrumental Player */}\n        <Card className=\"hymn-player text-white mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <h3 className=\"font-semibold\">Instrumental</h3>\n                <p className=\"text-sm opacity-90\">Versão para acompanhamento</p>\n              </div>\n              <Button\n                size=\"icon\"\n                className=\"w-12 h-12 rounded-full bg-white/20 hover:bg-white/30\"\n                onClick={() => setIsPlaying(!isPlaying)}\n                data-testid=\"button-play-instrumental\"\n              >\n                {isPlaying ? (\n                  <Pause className=\"w-5 h-5\" />\n                ) : (\n                  <Play className=\"w-5 h-5\" />\n                )}\n              </Button>\n            </div>\n            \n            {/* Progress Bar */}\n            <div className=\"w-full bg-white/20 rounded-full h-2 mb-4\">\n              <div className=\"bg-white h-2 rounded-full\" style={{ width: \"25%\" }} />\n            </div>\n            \n            <div className=\"flex items-center justify-between text-sm opacity-90\">\n              <span>0:45</span>\n              <span>3:12</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Hymn Lyrics */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"font-bold text-lg mb-4 text-center\">Letra</h3>\n            <div className=\"space-y-4 text-center leading-relaxed\">\n              {hymn.lyrics.map((line, index) => (\n                <p key={index} className=\"text-base\">\n                  {line}\n                </p>\n              ))}\n              \n              {hymn.chorus && (\n                <div className=\"mt-6 p-4 bg-primary/5 rounded-lg\">\n                  <p className=\"font-semibold text-primary mb-3\">Coro:</p>\n                  {hymn.chorus.split('\\n').map((line, index) => (\n                    <p key={index} className=\"text-base text-primary/90 mb-2\">\n                      {line}\n                    </p>\n                  ))}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Actions */}\n        <div className=\"mt-6 grid grid-cols-2 gap-3\">\n          <Button \n            variant=\"outline\" \n            onClick={() => setLocation(\"/hymnal\")}\n            data-testid=\"button-back-to-list\"\n          >\n            Voltar à Lista\n          </Button>\n          <Button \n            onClick={toggleFavorite}\n            variant={isFavorite ? \"default\" : \"outline\"}\n            data-testid=\"button-toggle-favorite\"\n          >\n            {isFavorite ? 'Favoritado ❤️' : 'Favoritar'}\n          </Button>\n        </div>\n      </div>\n    </MobileContainer>\n  );\n}","size_bytes":6593}},"version":1}